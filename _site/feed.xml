<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-26T10:14:47-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Stefan Sahagian</title><subtitle>This is my personal website and blog. Here I write about coding and personal projects.</subtitle><entry><title type="html">LiveView, Channels, and PubSub</title><link href="http://localhost:4000/2024/03/20/liveview-channels-and-pubsub.html" rel="alternate" type="text/html" title="LiveView, Channels, and PubSub" /><published>2024-03-20T00:00:00-04:00</published><updated>2024-03-20T00:00:00-04:00</updated><id>http://localhost:4000/2024/03/20/liveview-channels-and-pubsub</id><content type="html" xml:base="http://localhost:4000/2024/03/20/liveview-channels-and-pubsub.html"><![CDATA[<p>I was recently experimenting with Phoenix Channels and Liveview to learn a bit more about Phoenix. I’m working on another social platform project right now, so I went for a chat app. I noticed that most tutorials used either Phoenix Channels, the official Javascript client and a JS frontend, or Liveview on its own. I wanted to see if I could combine LiveView with Channels. Here’s what I learned. Warning: this isn’t really a tutorial, more of a rambling recapitulation of what’s in the docs, except pointing out what I didn’t get the first time around.</p>

<p>TL;DR/Oversimplification: <a href="https://hexdocs.pm/phoenix/channels.html">Channels</a> let things outside your Phoenix app connect to your PubSub system via websocket. One Channel process per client, a Channel process for every client. A <a href="https://hexdocs.pm/phoenix_live_view/welcome.html">LiveView</a> is an Elixir process as well that maintains a websocket connection and sends server-rendered html to a browser client. LiveViews can also communicate with Channels via <a href="https://hexdocs.pm/phoenix_pubsub/2.1.3/Phoenix.PubSub.html">PubSub</a>. These processes communicate via broadcast and then render (or don’t) the message data to their respective clients.</p>

<p>Right off the bat, this is not a normal way of doing things. Phoenix Channels and Liveview are two great tools that were built for two adjacent but different things and you wouldn’t necessarily want to use them side by side like this. A Phoenix Channel is a high-level abstraction of the PubSub (Publisher/Subscriber) system paired with a websocket connection that allows clients to connect with your Phoenix application. LiveView is a framework for delivering real-time, server-rendered HTML to browser clients via websocket connection. Under the hood, a LiveView is an Elixir process with some additional callbacks. A Channel is an Elixir process with additional callbacks. Note that when I say process, I really mean <a href="https://hexdocs.pm/elixir/1.12/GenServer.html">GenServer</a>, but I find the term can make it hard to explain things to people who are new to Elixir. Channels use websockets. LiveViews use websockets. Channels have clients. LiveViews have clients. Though aimed at different use cases, these two concepts are interesting and not wholly imcompatible, and that’s reason enough to experiment with them.</p>

<p>One thing to note is that when a client connects to a Channel it usually must authenticate via some logic in the Channel’s join/3 callback. I find the verb “join” somewhat misleading, particularly in the chat application example scenario. The client is “join”-ing the conversation of the chosen PubSub topic, but there is only one Channel process per client. Multiple clients are <strong>not</strong> connecting to a single Channel. In contrast, The LiveView process, being native to the application, does not need to authenticate to “join” the chat, it simply subscribes to the same PubSub topic. To be more specific, it is to be assumed that if a user is able to view the LiveView page then it follows that their session would have already been authenticated in some way. Even if your application had the concept of a private or channel that required additional authentication to view from a LiveView, that authentication would be done via the Plug pipeline and not when the LiveView renders. This may seem obvious, but I found it a little confusing at first.</p>

<p>The key for my understarnding was getting to better know the PubSub system and how a Channel interacts with it. To repeat, a Channel is a process that acts as a link between a client and the rest of an Elixir application. A client could be a JavaScript application running in a browser, a desktop application, an IoT device, etc. It’s any program that is not part of the Elixir application itself. When a client connects (which it will do so through some kind of client library), it will first hit the application’s Endpoint (yet another GenServer) which will then route the client to the requested Channel. A new Channel process is then spawned for that client. One channel process per client. The Channel process will maintain any state regarding the connection and subscribe to the PubSub topic initially requested by the client. The Channel process will then monitor for any messages that are broadcast on that topic. Depending on how the event handlers are implemented, the Channel will determine what to do with each message it receives, and can push them back down to the client. When a Channel process receives a message from the client, it can then broadcast that data through the PubSub system to subscribers of that topic, whether they be other Channel processes, LiveView processes, or any other process in the application.</p>

<p>Liveview on the other hand is relatively simple. It renders an initial html response when the page loads, then upgrades to a stateful view (via websocket) when the load is complete. When socket assigns (i.e. variables) or the stateful view changes the view re-renders those parts that change. Event handlers implemented in the serverside determine the specific behavior of the stateful view. It can also do all the things that any nother Elixir process can do, meaning send and receive messages. Via PubSub subscription the LiveView can listen for events broadcast on a chosen topic and then handle those events as you see fit, typically by updating socket assigns and triggering a re-paint of the affected area of the DOM. Unhandled events will be ignored and dropped through the default GenServer implementations that LiveView (and Channels) are built on.</p>

<p>Something that I kept tripping over is the fact that every LiveView and Channel is on equal footing. When you broadcast an event to the PubSub you are not trying to send an event to the Channel or the LiveView to then re-broadcast it. You are simply telling the PubSub “hey, tell all subscribers of this topic that this event happened.” If you don’t want the sending process to get its own message back, you can use <code class="language-plaintext highlighter-rouge">broadcast_from/5</code>.</p>

<p>In this one, I mostly learned how <em>not</em> to use PubSub. Shoutout to these DWYL tutorials (<a href="https://github.com/dwyl/phoenix-chat-example">Channels tutorial</a>, <a href="https://github.com/dwyl/phoenix-liveview-chat-example">LiveView tutorial</a>) that I Frankenstein-ed together for this one. If you’re wondering why I didn’t just follow these two more closely, I find that I learn best from taking the unhappy path. You can <a href="https://github.com/Shaka-n/demo-chat-app">check out the code here</a>, it’s a mess and I’m not sorry. Tune in next time, whenever that is, as I add in authentication, room navigation, and potentially a non-browser client.</p>]]></content><author><name></name></author><category term="elixir" /><summary type="html"><![CDATA[I was recently experimenting with Phoenix Channels and Liveview to learn a bit more about Phoenix. I’m working on another social platform project right now, so I went for a chat app. I noticed that most tutorials used either Phoenix Channels, the official Javascript client and a JS frontend, or Liveview on its own. I wanted to see if I could combine LiveView with Channels. Here’s what I learned. Warning: this isn’t really a tutorial, more of a rambling recapitulation of what’s in the docs, except pointing out what I didn’t get the first time around.]]></summary></entry><entry><title type="html">Journey Into Shaders, Sea Bob</title><link href="http://localhost:4000/2023/12/12/journey-into-shaders.html" rel="alternate" type="text/html" title="Journey Into Shaders, Sea Bob" /><published>2023-12-12T00:00:00-05:00</published><updated>2023-12-12T00:00:00-05:00</updated><id>http://localhost:4000/2023/12/12/journey-into-shaders</id><content type="html" xml:base="http://localhost:4000/2023/12/12/journey-into-shaders.html"><![CDATA[<p>I’ve been messing around with writing shaders recently. I’m just learning for fun. It appeals to me because of how fundamental a practice it is and one that hasn’t changed all that dramatically (depending on who you ask) since the introduction of the dedicated GPU. Being the cynic and luddite that I am (joke), I’m even doubtful that this will change with the broader adoption of Gaussian Splatting and the Vulkan API (I don’t think these are necessary for making good video games, but that’s another blog post). All that aside, graphics programming: it’s what’s for dinner.</p>

<p>To keep things simple and enjoyable enough for me to pursue this alongside every other side project in my life, I’m starting with GLSL, Shadertoy.com, Iñigo Quiles’ website, and The Book of Shaders. I’ve slightly cooled on Shadertoy due to its odd choice of naming its uniforms different from most other GLSL implementations, making it a chore to port my local code into the site. Also, probably because I use Brave, I can’t get the in-browser editor to save my dang code, so screw ‘em babe. As I publish new shaders on my journey, I’ll post them here. As I come to shaping algorithms, I’ll add them to <a href="https://github.com/Shaka-n/shader-shaping-functions">my repo where I collect the shaping functions</a> I’ve spent an appreciable amount of time trying to understand. This is all very painterly to me; lots of magic numbers, intuitions, and vibes. I don’t recommend trying to learn much of anything here.</p>

<p>I use <a href="https://github.com/patriciogonzalezvivo/glslCanvas">Patricio Gonzalez’s glslCanvas</a> to render my shaders on this site, and <a href="https://github.com/patriciogonzalezvivo/glslViewer">glslViewer</a> by the same author to develop them locally.</p>

<p>So here’s my first two shaders. The first one I call <em>Sea Bob</em>, and is meant to invoke the feeling of closing your eyes on a sunny day, bobbing just above the surface of the ocean as the waves gently lap over your head. Artsy, eh? I made this for one of the exercises in <em>The Book of Shaders</em>.</p>

<canvas class="glslCanvas" data-fragment="
#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform float u_time;

float doubleCubicSeatWithLinearBlend (float x, float a, float b){

  float epsilon = 0.00001;
  float min_param_a = 0.0 + epsilon;
  float max_param_a = 1.0 - epsilon;
  float min_param_b = 0.0;
  float max_param_b = 1.0;
  a = min(max_param_a, max(min_param_a, a));  
  b = min(max_param_b, max(min_param_b, b)); 
  b = 1.0 - b; //reverse for intelligibility.
  
  float y = 0.0;
  if (x &lt;= a){
    y = b*x + (1.0-b)*a*(1.0-pow(1.0-x/a, 3.0));
  } else {
    y = b*x + (1.0-b)*(a + (1.0-a)*pow((x-a)/(1.0-a), 3.0));
  }
  return y;
}


vec3 colorA = vec3(0.053,0.670,0.316);
vec3 colorB = vec3(0.079,0.985,0.976);

void main() {
    vec3 color = vec3(0.0);
    
    float dbc = doubleCubicSeatWithLinearBlend(sin(u_time), 0.324, 0.5);
	float pct = sin(dbc);
    // float pct = 1.0 - pow(max(0.0, abs(sin(dbc))), 0.208);

    // Mix uses pct (a value from 0-1) to
    // mix the two colors
    color = mix(colorA, colorB, pct);

    gl_FragColor = vec4(color,1.0);
}" width="500" height="500"></canvas>

<figure class="highlight"><pre><code class="language-glsl" data-lang="glsl"><span class="c1">// Sea Bob</span>
<span class="cp">#ifdef GL_ES
</span><span class="k">precision</span> <span class="kt">mediump</span> <span class="kt">float</span><span class="p">;</span>
<span class="cp">#endif
</span>
<span class="k">uniform</span> <span class="kt">vec2</span> <span class="n">u_resolution</span><span class="p">;</span>
<span class="k">uniform</span> <span class="kt">float</span> <span class="n">u_time</span><span class="p">;</span>

<span class="kt">float</span> <span class="nf">doubleCubicSeatWithLinearBlend</span> <span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">){</span>

  <span class="kt">float</span> <span class="n">epsilon</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mo">00001</span><span class="p">;</span>
  <span class="kt">float</span> <span class="n">min_param_a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span> <span class="o">+</span> <span class="n">epsilon</span><span class="p">;</span>
  <span class="kt">float</span> <span class="n">max_param_a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">-</span> <span class="n">epsilon</span><span class="p">;</span>
  <span class="kt">float</span> <span class="n">min_param_b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
  <span class="kt">float</span> <span class="n">max_param_b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
  <span class="n">a</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">max_param_a</span><span class="p">,</span> <span class="n">max</span><span class="p">(</span><span class="n">min_param_a</span><span class="p">,</span> <span class="n">a</span><span class="p">));</span>  
  <span class="n">b</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">max_param_b</span><span class="p">,</span> <span class="n">max</span><span class="p">(</span><span class="n">min_param_b</span><span class="p">,</span> <span class="n">b</span><span class="p">));</span> 
  <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span> <span class="c1">//reverse for intelligibility.</span>
  
  <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="p">){</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">b</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">b</span><span class="p">)</span><span class="o">*</span><span class="n">a</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">pow</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">x</span><span class="o">/</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">));</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">b</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">b</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">pow</span><span class="p">((</span><span class="n">x</span><span class="o">-</span><span class="n">a</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">a</span><span class="p">),</span> <span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">));</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">y</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">vec3</span> <span class="n">colorA</span> <span class="o">=</span> <span class="kt">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mo">053</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">670</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">316</span><span class="p">);</span>
<span class="kt">vec3</span> <span class="n">colorB</span> <span class="o">=</span> <span class="kt">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mo">07</span><span class="mi">9</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">985</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">976</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="kt">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
    
    <span class="kt">float</span> <span class="n">dbc</span> <span class="o">=</span> <span class="n">doubleCubicSeatWithLinearBlend</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">u_time</span><span class="p">),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">324</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">);</span>
	<span class="kt">float</span> <span class="n">pct</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">dbc</span><span class="p">);</span>
    <span class="c1">// float pct = 1.0 - pow(max(0.0, abs(sin(dbc))), 0.208);</span>

    <span class="c1">// Mix uses pct (a value from 0-1) to</span>
    <span class="c1">// mix the two colors</span>
    <span class="n">color</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">colorA</span><span class="p">,</span> <span class="n">colorB</span><span class="p">,</span> <span class="n">pct</span><span class="p">);</span>

    <span class="nb">gl_FragColor</span> <span class="o">=</span> <span class="kt">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>…and this one’s called <em>Circles</em>. Technically, it’s the first thing I made on my own.</p>

<iframe width="640" height="360" frameborder="0" src="https://www.shadertoy.com/embed/csKBRy?gui=true&amp;t=10&amp;paused=true&amp;muted=false" allowfullscreen=""></iframe>

<figure class="highlight"><pre><code class="language-glsl" data-lang="glsl"><span class="c1">// Circles</span>
<span class="kt">void</span> <span class="nf">disk</span><span class="p">(</span><span class="kt">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="kt">vec2</span> <span class="n">center</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="kt">vec3</span> <span class="n">color</span><span class="p">,</span> <span class="k">inout</span> <span class="kt">vec3</span> <span class="n">pixel</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span><span class="p">(</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="o">-</span><span class="n">center</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">radius</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">pixel</span> <span class="o">=</span> <span class="n">color</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">mainImage</span><span class="p">(</span> <span class="k">out</span> <span class="kt">vec4</span> <span class="n">fragColor</span><span class="p">,</span> <span class="k">in</span> <span class="kt">vec2</span> <span class="n">fragCoord</span> <span class="p">)</span>
<span class="p">{</span>
<span class="c1">// what is happening</span>
    <span class="c1">// Normalized pixel coordinates (from 0 to 1)</span>
    <span class="kt">vec2</span> <span class="n">uv</span> <span class="o">=</span> <span class="kt">vec2</span><span class="p">(</span><span class="n">fragCoord</span> <span class="o">*</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span> <span class="o">-</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">xy</span><span class="p">)</span> <span class="o">/</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>

    <span class="kt">vec3</span> <span class="n">bgCol</span> <span class="o">=</span> <span class="kt">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">3</span><span class="p">);</span>
	<span class="kt">vec3</span> <span class="n">colBlue</span> <span class="o">=</span> <span class="kt">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">216</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">471</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">698</span><span class="p">);</span>
	<span class="kt">vec3</span> <span class="n">colRed</span> <span class="o">=</span> <span class="kt">vec3</span><span class="p">(</span><span class="mi">1</span><span class="p">.</span><span class="mo">00</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">329</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">298</span><span class="p">);</span>
	<span class="kt">vec3</span> <span class="n">colYellow</span> <span class="o">=</span> <span class="kt">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">867</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">910</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">247</span><span class="p">);</span>

    <span class="kt">vec3</span> <span class="n">pixel</span> <span class="o">=</span> <span class="n">bgCol</span><span class="p">;</span>
 
    <span class="n">disk</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">2</span><span class="p">,</span> <span class="n">colBlue</span><span class="p">,</span> <span class="n">pixel</span><span class="p">);</span>
    <span class="n">disk</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="kt">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">8</span><span class="p">,</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="p">,</span> <span class="n">colRed</span><span class="p">,</span> <span class="n">pixel</span><span class="p">);</span>
    <span class="n">disk</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="kt">vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="p">),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">4</span><span class="p">,</span> <span class="n">colYellow</span><span class="p">,</span> <span class="n">pixel</span><span class="p">);</span>

    <span class="c1">// Output to screen</span>
    <span class="n">fragColor</span> <span class="o">=</span> <span class="kt">vec4</span><span class="p">(</span><span class="n">pixel</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>

<span class="p">}</span></code></pre></figure>

<p>That’s all for now! Be back soon with more flashing colors and abstract shapes.</p>]]></content><author><name></name></author><category term="glsl," /><category term="shaders," /><category term="graphics" /><summary type="html"><![CDATA[I’ve been messing around with writing shaders recently. I’m just learning for fun. It appeals to me because of how fundamental a practice it is and one that hasn’t changed all that dramatically (depending on who you ask) since the introduction of the dedicated GPU. Being the cynic and luddite that I am (joke), I’m even doubtful that this will change with the broader adoption of Gaussian Splatting and the Vulkan API (I don’t think these are necessary for making good video games, but that’s another blog post). All that aside, graphics programming: it’s what’s for dinner.]]></summary></entry><entry><title type="html">Leetcode Reflections: #36: Valid Sudoku</title><link href="http://localhost:4000/2023/11/14/leetcode-36.html" rel="alternate" type="text/html" title="Leetcode Reflections: #36: Valid Sudoku" /><published>2023-11-14T00:00:00-05:00</published><updated>2023-11-14T00:00:00-05:00</updated><id>http://localhost:4000/2023/11/14/leetcode-36</id><content type="html" xml:base="http://localhost:4000/2023/11/14/leetcode-36.html"><![CDATA[<p><strong>TL;DR:</strong> <em>Scroll to the bottom for the code</em></p>

<p>This one is fairly straightforward, but I always have trouble remembering the trick to it, so here’s a quick post going through it.</p>

<p><strong><a href="https://leetcode.com/problems/valid-sudoku/description/">Prompt</a></strong></p>
<blockquote>

  <p>Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:</p>

  <p>Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:</p>

  <p>A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.</p>
</blockquote>

<p>The deal here is you’re given a list of lists and you need to check for uniqueness. You need to check that values in each list are unique, excepting the placeholder “.”, and that the values at the same index of each sublist are unique. Rephrased again, values need to be unique in each column and row of the input matrix (list of lists). Checking which square values are in is the real trick here, which I’ll explain later. A brute force approach is totally acceptable here because we’re dealing with a finite input N value. If we were dealing with some kind of meta sudoku of <code class="language-plaintext highlighter-rouge">NxN</code> values, we’d have to be a bit more concerned. So, we’re clear to use a nested loop.</p>

<p>To check for uniqueness we can use a dict for each row and column. If we cared to optimize for space we could use one dict for this (by concatentating the index with the column, row, or square prefix for the hash key) but it’s easier to read with three and again we’re dealing with very finite values, so I’m not overly concerned with optimization.</p>

<p>On each cycle of the loop we check if the value is present in the row, column, or square dicts, meaning we’ve seen it before and it is not unique. If we have, the board is invalid and we can return False. If we haven’t, we want to add the value to our dict(s) to represent that the value was seen. But how do we know where the value is in the board? The row and column are easily identified, with <code class="language-plaintext highlighter-rouge">i</code> representing the column and <code class="language-plaintext highlighter-rouge">j</code> representing the row (or vice versa, keep in mind these are abstractions). Finding the square is trickier: you need to perform floor division on the indices (i.e. i//3, j//3).</p>

<p>The board itself might be a 9x9 grid, but the squares represent a 3x3 grid (i.e. a matrix). Performing floor division divides and rounds down, which conveniently produces a value that could be used to access values in this theoretical matrix. For example <code class="language-plaintext highlighter-rouge">(2//3, 5//3)</code> would be <code class="language-plaintext highlighter-rouge">(0,1)</code>, which would be the first row, second column in our square matrix. We don’t actually need to create this matrix though, we can just represent it through these pair values in our seen dict(s). This is the trick that I always forget: the tuple is necessary to represent the square that a value is a member of. Keeping the “meta-matrix” in mind helps me to remember this. Hopefully writing this post will too.</p>

<p>Solution in Code:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isValidSudoku</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">board</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">square_seen</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="n">col_seen</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="n">row_seen</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="s">"."</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="ow">in</span> <span class="n">col_seen</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span>
                <span class="n">num</span> <span class="ow">in</span> <span class="n">row_seen</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="ow">or</span>
                <span class="n">num</span> <span class="ow">in</span> <span class="n">square_seen</span><span class="p">[(</span><span class="n">i</span><span class="o">//</span><span class="mi">3</span><span class="p">,</span> <span class="n">j</span><span class="o">//</span><span class="mi">3</span><span class="p">)]):</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">col_seen</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
                    <span class="n">row_seen</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
                    <span class="n">square_seen</span><span class="p">[(</span><span class="n">i</span><span class="o">//</span><span class="mi">3</span><span class="p">,</span> <span class="n">j</span><span class="o">//</span><span class="mi">3</span><span class="p">)].</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">True</span></code></pre></figure>]]></content><author><name></name></author><category term="leetcode," /><category term="python" /><summary type="html"><![CDATA[TL;DR: Scroll to the bottom for the code]]></summary></entry><entry><title type="html">Leetcode Reflections: #238, Product of Array Except Self</title><link href="http://localhost:4000/2023/10/19/leetcode-238.html" rel="alternate" type="text/html" title="Leetcode Reflections: #238, Product of Array Except Self" /><published>2023-10-19T00:00:00-04:00</published><updated>2023-10-19T00:00:00-04:00</updated><id>http://localhost:4000/2023/10/19/leetcode-238</id><content type="html" xml:base="http://localhost:4000/2023/10/19/leetcode-238.html"><![CDATA[<p><strong>TL;DR:</strong> <em>Scroll to the bottom for the code</em></p>

<p>I didn’t solve this myself, but this is how it works. This is a variation on prefix sums and suffix sums. How would you know to think of such a thing? I didn’t, but I think the key clue would be that each element in the answer array is a result of some calculation of every element in the input array except itself. This exception can be rephrased to mean: multiply all of the elements before i (i.e. prefix) and multiply all the elements after i (i.e. suffix). With that in mind, here’s my understanding of the two concepts:</p>

<p>A prefix sum is the running sum of all the numbers up to and including the current number in the list from left to right. You’re on the right track if you see the phrase “running” and think “counter”. Our counter will naturally initialize to 0 since this is a summing operation. For example, in pseudocode:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>prefix_sum = 0
nums = [1,2,3,4]
prefix_sums = [1,3,6,10]
</code></pre></div></div>

<p>A suffix sum is the same, except running in the opposite direction:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>suffix_sum = 0
nums = [1,2,3,4]
suffix_sums = [10,9,7,4]
</code></pre></div></div>

<p>This problem differs in that we are looking for products, not sums. Right off the bat, since this is a multiplication operation, we can’t initialize to 0 or our counter will never produce anyhing. We’ll need to initialize it to 1 so the first operation will be a useful product.</p>

<p>A prefix product would look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>prefix_product = 1
nums = [1,2,3,4]
prefix_products = [1,2,6,24]
</code></pre></div></div>

<p>And a suffix product would like like this:</p>

<p>suffix_product = 1
    nums = [1,2,3,4]
    suffix_products = [24,24,12,4]</p>

<p>However, we can already tell that this is not quite right. We need to factor in that as we calculate the prefix/suffix that we exclude nums[i] for our given product[i].How do we exclude a given number from our product calculation? We could divide it out of the final list (e.g. answer[i] /= nums[i]), but that’s explicitly not allowed.</p>

<p>The best solution was a bit difficult for me to wrap my head around: we need to initialize all of our answers to 1.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>prefix_product = 1
nums = [1,2,3,4] 
initial_prefix_products = [1,1,1,1]
final_prefix_products = [1,1,2,6]
</code></pre></div></div>

<p>I’ll admit, this is not very intuitive without getting into the code. Think of it this way: at first we were initializing each answer[i] to nums[i], to be multiplied by each other element in the array (the running prefix). If we initialize to 1, we have a simple way to avoid including the current number in the prefix/suffix calculation. Rather than multiply by the current number, we multiply our current running product by the current corresponding element in the answer array. Since we initialized all of those value to 1 the running product will be unchanged, in effect excluding the current element nums[i]. After we commit this product to the answer array, we can update the running product with the current elements in nums so the next cycle has the correct running product. Said more concisely: We update the answers array at i with the current running product, and then we update it for the next cycle to include the current element from nums at i.</p>

<p>Let’s look at suffix product now:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>suffix_product = 1
nums = [1,2,3,4]
initial_prefix_products = [1,1,1,1]
suffix_products = [12,12,4,1]
</code></pre></div></div>

<p>Our answer still doesn’t look right though, and that’s because we are still only accounting for one side of i for each running product. Let’s combine the two, in pseudcode:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>prefix_product = 1
nums = [1,2,3,4] 
init_answers = [1,1,1,1]
~calculation~
intermediate_prefix_answers = [1,1,2,6]

suffix_product = 1
nums = [1,2,3,4]
intermediate_prefix_answers = [1,1,2,6]

final_combined_answer = [24,12,8,6]
</code></pre></div></div>

<p>This is a little easier to read in the actual code in terms of looped instructions:
    - initialize our answer array and running products
    - loop over the length of our input array
        - update the answer at i with the answer at i times the running product
        - update the running product with the running product times the current number at i</p>

<p>You could do this with two consecutive loops, calculating first the prefix products and then the suffix products or vice versa. This would give you a time complexity of O(2N), which is really just O(N) and perfectly acceptable. However you can do this in one loop, traversing from both ends of the array at once. You can do this in Python by by subtracting length-i-1 to get the end of the array, decrementing with each pass. However, I know a little trick that looks much cooler: bitwise negation.</p>

<p>In binary, bitwise negation is essentially flipping all the 0s to 1s and 1s to 0s. In Python, negative binary numbers are represented with leading 1s. So if you have a 0, and you flip all of the bits, you have 1, except with leading 1s, which means -1. Python Lists interpret negative indices as starting from the end of the list. So nums[-1] is actually the last element. The specifics of Python integers and bitwise operators are a bit more complicated than that, so check out the docs on python bitwise operators, but basically this let’s us get the mirror position of a given index at the end of a list.</p>

<p>Anyways, that’s my understanding of this problem and my tiny contribution to it. I didn’t get it on my own, so I had to write all of this out, and I hope it helps somebody else down the line.</p>

<p>Solution in Code:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">productExceptSelf</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">prefix_product</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">suffix_product</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*=</span> <span class="n">prefix_product</span>
            <span class="n">prefix_product</span> <span class="o">=</span> <span class="n">prefix_product</span> <span class="o">*</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">answer</span><span class="p">[</span><span class="o">~</span><span class="n">i</span><span class="p">]</span> <span class="o">*=</span> <span class="n">suffix_product</span>
            <span class="n">suffix_product</span> <span class="o">=</span> <span class="n">suffix_product</span><span class="o">*</span><span class="n">nums</span><span class="p">[</span><span class="o">~</span><span class="n">i</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">answer</span></code></pre></figure>]]></content><author><name></name></author><category term="leetcode," /><category term="python" /><summary type="html"><![CDATA[TL;DR: Scroll to the bottom for the code]]></summary></entry><entry><title type="html">Making Multi-Tenancy Less Magical</title><link href="http://localhost:4000/elixir/2023/08/11/making-multi-tenancy-less-magical.html" rel="alternate" type="text/html" title="Making Multi-Tenancy Less Magical" /><published>2023-08-11T00:00:00-04:00</published><updated>2023-08-11T00:00:00-04:00</updated><id>http://localhost:4000/elixir/2023/08/11/making-multi-tenancy-less-magical</id><content type="html" xml:base="http://localhost:4000/elixir/2023/08/11/making-multi-tenancy-less-magical.html"><![CDATA[<p>I was tasked by a friend to help implement multi-tenancy in his WISP platform in a way that is still secure, but more conducive to testing and generally more explicit.</p>

<p>Multi-tenancy is an architecture pattern where a single instance of an application serves multiple tenants/entities while keeping their respective data isolated from each other. Commonly used in SaaS platforms, the pattern helps keep costs low by allowing users to share resources and while simplifying updates and maintenance. In Elixir, there are two common approaches to multi-tenancy: database prefixing and foreign key associations.</p>

<p>The crux of the <a href="https://hexdocs.pm/ecto/multi-tenancy-with-query-prefixes.html">query prefixing</a> technique relies on adding a new database prefix for every tenant, which keeps their data completely siloed in separate Postgres schemas. In an Elixir app, you set up your Ecto config like so to change the default database prefix:</p>

<figure class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">query_args</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"SET search_path TO connection_prefix"</span><span class="p">,</span> <span class="p">[]]</span>

<span class="n">config</span> <span class="ss">:my_app</span><span class="p">,</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Repo</span><span class="p">,</span>
  <span class="ss">username:</span> <span class="s2">"postgres"</span><span class="p">,</span>
  <span class="ss">password:</span> <span class="s2">"postgres"</span><span class="p">,</span>
  <span class="ss">database:</span> <span class="s2">"demo_dev"</span><span class="p">,</span>
  <span class="ss">hostname:</span> <span class="s2">"localhost"</span><span class="p">,</span>
  <span class="ss">pool_size:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="ss">after_connect:</span> <span class="p">{</span><span class="no">Postgrex</span><span class="p">,</span> <span class="ss">:query!</span><span class="p">,</span> <span class="n">query_args</span><span class="p">}</span></code></pre></figure>

<p>You’ll then have to explicitly create a new prefix on your database, as Ecto won’t do it for you.</p>

<p>Querying across prefixes can be done by passing the :prefix keyword at the query, struct, or join level:</p>

<figure class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="no">MyApp</span><span class="o">.</span><span class="no">Repo</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="no">Sample</span><span class="p">,</span> <span class="ss">prefix:</span> <span class="s2">"public"</span><span class="p">)</span>
<span class="o">...</span>
<span class="n">from</span> <span class="n">p</span> <span class="ow">in</span> <span class="no">Post</span><span class="p">,</span> <span class="ss">prefix:</span> <span class="s2">"foo"</span><span class="p">,</span>
  <span class="ss">join:</span> <span class="n">c</span> <span class="ow">in</span> <span class="no">Comment</span><span class="p">,</span> <span class="ss">prefix:</span> <span class="s2">"bar"</span></code></pre></figure>

<p>The drawbacks to this approach are that you need to add a new prefix for every tenant, and then must run database migrations for each prefix individually when making changes. This can get very costly and slow at scale, not to mention the headache it poses for just writing your average Ecto join. Further, this does require a bit more Postgres knowledge to work with, which imposes its own kind of overhead. There are hex packages that abstract the funky parts of this away, but the scaling costs remain the same. Not to mention, adding packages breaks with the spirit of my original mission of making things less magical.</p>

<p>By contrast, enforcing <a href="https://hexdocs.pm/ecto/multi-tenancy-with-foreign-keys.html">multi-tenancy via foreign key</a> should appear much more familiar to the average dev. Let’s say schemas are restricted by <code class="language-plaintext highlighter-rouge">org-id</code> such that only users from that organization can access its data. Just add this to all of your queries for tenanted schemas (i.e. data that should be siloed per user/client/tenant), and you’re good to go:</p>

<figure class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="o">...</span>
<span class="n">where</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="ss">org_id:</span> <span class="o">^</span><span class="n">org_id</span><span class="p">)</span>
<span class="o">...</span></code></pre></figure>

<p>To make this more reliable and less wildly insecure, a common approach is to leverage the callback <code class="language-plaintext highlighter-rouge">prepare_query/3</code> from Ecto.Query. Adding this callback to our <code class="language-plaintext highlighter-rouge">repo.ex</code> will ensure that it is run before any other Ecto Query, enforcing our requirement that a tenanted schema can only be accessed by a tenant with the proper org id.</p>

<figure class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Repo</span> <span class="k">do</span>
  <span class="o">...</span>
  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">prepare_query</span><span class="p">(</span><span class="n">_operation</span><span class="p">,</span> <span class="p">%{</span><span class="ss">from:</span> <span class="p">%{</span><span class="ss">source:</span> <span class="p">{</span><span class="n">_</span><span class="p">,</span> <span class="n">schema</span><span class="p">}}}</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">excepted?</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">member?</span><span class="p">(</span><span class="nv">@excepted_schemas</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span>
    <span class="k">cond</span> <span class="k">do</span>
      <span class="n">opts</span><span class="p">[</span><span class="ss">:skip_org_id</span><span class="p">]</span> <span class="o">||</span> <span class="n">opts</span><span class="p">[</span><span class="ss">:schema_migration</span><span class="p">]</span> <span class="o">-&gt;</span>
        <span class="p">{</span><span class="n">query</span><span class="p">,</span> <span class="n">opts</span><span class="p">}</span>

      <span class="n">org_id</span> <span class="o">=</span> <span class="n">opts</span><span class="p">[</span><span class="ss">:org_id</span><span class="p">]</span> <span class="o">-&gt;</span>
        <span class="p">{</span><span class="no">Ecto</span><span class="o">.</span><span class="no">Query</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="ss">org_id:</span> <span class="o">^</span><span class="n">org_id</span><span class="p">),</span> <span class="n">opts</span><span class="p">}</span>

      <span class="no">true</span> <span class="o">-&gt;</span>
        <span class="k">raise</span> <span class="s2">"expected org_id or skip_org_id to be set"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>You’ll still have to add <code class="language-plaintext highlighter-rouge">org_id</code> to every query though. Let’s make that easier by setting <code class="language-plaintext highlighter-rouge">org_id</code> by default. First, add these to <code class="language-plaintext highlighter-rouge">repo.ex</code>:</p>

<figure class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Repo</span> <span class="k">do</span>
  <span class="o">...</span>

  <span class="nv">@tenant_key</span> <span class="p">{</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:org_id</span><span class="p">}</span>

  <span class="k">def</span> <span class="n">put_org_id</span><span class="p">(</span><span class="n">org_id</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Process</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="nv">@tenant_key</span><span class="p">,</span> <span class="n">org_id</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">get_org_id</span><span class="p">()</span> <span class="k">do</span>
    <span class="no">Process</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nv">@tenant_key</span><span class="p">)</span>
  <span class="k">end</span></code></pre></figure>

<p>These will give every calling process an easy way to keep the org_id on hand. To set the org_id as a default option in all repo operations, we implement the <code class="language-plaintext highlighter-rouge">default_options/1</code> callback like so:</p>

<figure class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Repo</span> <span class="k">do</span>
  <span class="o">...</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">default_options</span><span class="p">(</span><span class="n">_operation</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">[</span><span class="ss">org_id:</span> <span class="n">get_org_id</span><span class="p">()]</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Now <code class="language-plaintext highlighter-rouge">org_id</code> will always be set by default on every repo operation and we don’t have to worry about specifying that we don’t want to pollute our data store. But how do we set the <code class="language-plaintext highlighter-rouge">org_id</code>? Well, it can vary, but in my case, I opted to add it to the Plug pipeline:</p>

<figure class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">def</span> <span class="n">call</span><span class="p">(%</span><span class="no">Plug</span><span class="o">.</span><span class="no">Conn</span><span class="p">{</span><span class="ss">host:</span> <span class="n">host</span><span class="p">}</span> <span class="o">=</span> <span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="ss">root_host:</span> <span class="n">root_host</span><span class="p">}</span> <span class="o">=</span> <span class="n">_opts</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">case</span> <span class="n">extract_subdomain</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">root_host</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">subdomain</span> <span class="ow">when</span> <span class="n">byte_size</span><span class="p">(</span><span class="n">subdomain</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
        <span class="no">Repo</span><span class="o">.</span><span class="n">find_and_put_org_id</span><span class="p">(</span><span class="n">subdomain</span><span class="p">)</span>
        <span class="n">org_id</span> <span class="o">=</span> <span class="no">Repo</span><span class="o">.</span><span class="n">find_org_id</span><span class="p">(</span><span class="n">subdomain</span><span class="p">)</span>
        <span class="n">conn</span>
        <span class="o">|&gt;</span> <span class="n">fetch_session</span><span class="p">()</span>
        <span class="o">|&gt;</span> <span class="n">put_session</span><span class="p">(</span><span class="ss">:org_id</span><span class="p">,</span> <span class="n">org_id</span><span class="p">)</span>

      <span class="n">_</span> <span class="o">-&gt;</span>
        <span class="n">conn</span>
    <span class="k">end</span>
  <span class="k">end</span></code></pre></figure>

<p>Plugs are a powerful part of the Phoenix framework that I won’t get into. Suffice to say, this will run when a user loads the page on their custom subdomain, and that subdomain will be used to retrieve their org id and set it in the process dictionary of our Repo module. They’ll still need to authenticate as normal, so there’s no opportunity for somebody to go to the wrong domain and login with the wrong org_id.</p>

<p>There is one last wrinkle however: what do you do when a schema doesn’t have org_id and can’t be joined to one? What if you have a schema in your ORM that is relatively remote from org_id? Are you forced to chain a long series of joins together every time? In my case there were two outliers like this: cron jobs and session tokens.</p>

<p>For the cron jobs (we used the Oban package), it doesn’t make sense for a daily system level job to be associated with a specific tenant. So, recalling the earlier prefix technique, I chose to give Oban its own database prefix. This is pretty simple to do in config, and there’s not much else to change but add an exception to <code class="language-plaintext highlighter-rouge">prepare_query/3</code>. Now the queries for Oban jobs skip right by the check and continue as normal.</p>

<p>For the session tokens, I opted for an explicit exceptions list. I’d rather not mess around with the authentication code, and since it didn’t rely on my multi-tenancy solution to begin with, excepting it won’t introduce a new attack surface. By and large I want all schemas to be tenanted in some way within this app, so having a short list of the exceptions makes some sense, as I’m unlikely to add to it frequently. If I do, all I have to do is alias the schema and add it to the module attribute that defines the list of exceptions.</p>

<figure class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Repo</span> <span class="k">do</span>
  <span class="o">...</span>
 <span class="nv">@excepted_schemas</span> <span class="p">[</span><span class="no">UserToken</span><span class="p">]</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">prepare_query</span><span class="p">(</span><span class="n">_operation</span><span class="p">,</span> <span class="p">%{</span><span class="ss">from:</span> <span class="p">%{</span><span class="ss">source:</span> <span class="p">{</span><span class="n">_</span><span class="p">,</span> <span class="n">schema</span><span class="p">}}}</span><span class="o">=</span><span class="n">query</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">excepted?</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">member?</span><span class="p">(</span><span class="nv">@excepted_schemas</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span>
    <span class="k">cond</span> <span class="k">do</span>
      <span class="n">opts</span><span class="p">[</span><span class="ss">:skip_org_id</span><span class="p">]</span> <span class="o">||</span> <span class="n">opts</span><span class="p">[</span><span class="ss">:schema_migration</span><span class="p">]</span> <span class="o">||</span> <span class="n">opts</span><span class="p">[</span><span class="ss">:prefix</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"oban"</span> <span class="o">||</span> <span class="n">excepted?</span> <span class="o">-&gt;</span>
        <span class="p">{</span><span class="n">query</span><span class="p">,</span> <span class="n">opts</span><span class="p">}</span>

      <span class="n">org_id</span> <span class="o">=</span> <span class="n">opts</span><span class="p">[</span><span class="ss">:org_id</span><span class="p">]</span> <span class="o">-&gt;</span>
        <span class="p">{</span><span class="no">Ecto</span><span class="o">.</span><span class="no">Query</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="ss">org_id:</span> <span class="o">^</span><span class="n">org_id</span><span class="p">),</span> <span class="n">opts</span><span class="p">}</span>

      <span class="no">true</span> <span class="o">-&gt;</span>
        <span class="k">raise</span> <span class="s2">"expected org_id or skip_org_id to be set"</span>
    <span class="k">end</span>
  <span class="k">end</span>
 <span class="err">2</span><span class="n">nd</span></code></pre></figure>

<p>The combinations of approaches here are more explicit and more custom-tailored to the specific problem. This should make writing and maintaining tests much easier. While being perhaps somewhat less elegant, I think this will lend itself to simpler maintenance down the line as this project grows.</p>]]></content><author><name></name></author><category term="elixir" /><summary type="html"><![CDATA[I was tasked by a friend to help implement multi-tenancy in his WISP platform in a way that is still secure, but more conducive to testing and generally more explicit.]]></summary></entry><entry><title type="html">Developing a Personal Project, Part 3: How to Build a Discord Bot Using Nostrum</title><link href="http://localhost:4000/elixir/2023/05/31/developing-a-personal-project-part-4.html" rel="alternate" type="text/html" title="Developing a Personal Project, Part 3: How to Build a Discord Bot Using Nostrum" /><published>2023-05-31T00:00:00-04:00</published><updated>2023-05-31T00:00:00-04:00</updated><id>http://localhost:4000/elixir/2023/05/31/developing-a-personal-project-part-4</id><content type="html" xml:base="http://localhost:4000/elixir/2023/05/31/developing-a-personal-project-part-4.html"><![CDATA[<p><em>In the first three entries in this series I waxed poetic on my approach to personal coding projects. In this entry I’ll get down to business describing how to set up a Discord bot using Nostrum.</em></p>

<p>Before starting, you’ll need to have a Discord account and the latest version of Elixir. I would also recommend starting a new Discord server/guild to test your bot in with out risk of bothering your users.</p>

<p><strong>Registering a new Discord Application</strong></p>

<p>Step 1: Log into the <a href="https://discord.com/developers/">Discord Developer Portal</a> and register a new application.</p>

<p>Step 2: Under Oath2, generate an invitation URL for your application using the URL Generator. Select “bot” and “applications.commands” from the top list. This will bring up another list of permissions that your bot user can have. If you know exactly which permissions your bot needs, you can specify them now. Personally, I find it useful to give the bot Administrator permissions so that you can quickly move into development and worry about config best practices later.
Step 3: Open the generated URL in your browser. This will bring up a window that will let you select which server you’d like to add it to. Add it to your test server.</p>

<p>Step 4: In the “Bot” tab in the Discord Developer Portal, copy the token near the top of the page.</p>

<p>Step 5: Store your token as an environment variable. I use Oh My Zsh on Mac, so in my case I would open my ~.zshrc file with nvim, and add a line to the file like so:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DISCORD_BOT_TOKEN: MTExMzUxMDk5MjgzMjM3Mjc0Ng.999999.mtkJ7zfEHTZoD5ne5xS_999999_SZvtUYZxxDg
</code></pre></div></div>

<p>Aftwards, entering <code class="language-plaintext highlighter-rouge">source ~.zshrc</code> will ensure the environment variable is loaded. You can check by just typing <code class="language-plaintext highlighter-rouge">env</code> to list all of your set variables.</p>

<p>With that, we’re basically done with the Discord side of things, for a while anyways.</p>

<p><strong>Bootstrapping the Project</strong></p>

<p>I recommend starting a fresh Phoenix app for this because it gives us a directory and config structure that will be useful for getting up and running quickly. Nostrum implements a GenStage architecture (more on that later), which requires a Supervision Tree. If you’re comfortable starting a vanilla Elixir project and Supervision tree yourself, by all means go for it.</p>

<p>Step 1: Open your IDE of choice and a terminal, and enter <code class="language-plaintext highlighter-rouge">mix phx.new my_app --no-html --no-assets</code>. Starting the project this way will omit the HTML and Javascript bits, giving us purely an API for our bot user. If you plan to have some sort of UI for your app, just use <code class="language-plaintext highlighter-rouge">mix phx.new my_app</code>.</p>

<p>Step 2: In <code class="language-plaintext highlighter-rouge">mix.exs</code> add Nostrum to your dependecies list:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def deps do
  [{:nostrum, git: "https://github.com/Kraigie/nostrum.git"}]
end
</code></pre></div></div>
<p>Step 3: In <code class="language-plaintext highlighter-rouge">config/runtime.exs</code> add the following:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config :nostrum,
    token: System.get_env("HANEKAWA_BOT_TOKEN"),
    gateway_intents: :all
</code></pre></div></div>
<p>This will allow Nostrum to pick up your bots API key at runtime. By default Nostrum uses the Gateway API, which requires you to define which intents (i.e. which payloads you want to receive from Discord). As with permissions, it can be useful to set this to all for now, but it is certainly recommended to only receive those intents that you need.</p>

<p><strong>Implementing Nostrum</strong></p>

<p>Now that we’ve spun up our project and registered a new application, we’re ready to implement the last pieces.</p>

<p>Step 1: Make a new file <code class="language-plaintext highlighter-rouge">lib/my_app/consumer_supervisor.ex</code>. Implement the <code class="language-plaintext highlighter-rouge">start_link/1</code> and <code class="language-plaintext highlighter-rouge">init/1</code> callbacks, like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule MyApp.ConsumerSupervisor do
  use Supervisor

  def start_link(args) do
    Supervisor.start_link(__MODULE__, args, name: __MODULE__)
  end

  @impl true
  def init(_args) do
    children =
      for n &lt;- 1..System.schedulers_online(),
          do: Supervisor.child_spec({MyApp.Consumer, []}, id: {:my_app, :consumer, n})

    Supervisor.init(children, strategy: :one_for_one)
  end
end
</code></pre></div></div>

<p>Step 2: Make a new file <code class="language-plaintext highlighter-rouge">lib/my_app/consumer.ex</code>, and implement the <code class="language-plaintext highlighter-rouge">start_link/1</code> callback:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule Hanekawa.Consumer do
  @moduledoc """
    This module defines the consumer agent that acts as a gateway event handler for
    events passed from the Discord WebSocket connection.
  """
  use Nostrum.Consumer

  alias Nostrum.Api

  def start_link do
    Consumer.start_link(__MODULE__)
  end
end
</code></pre></div></div>

<p>Step 3: Implement event handlers. When an event comes through from Discord, Nostrum will attempt to match against the intent of the event (e.g. :MESSAGE_CREATE). We need a default handler to prevent the consumer from crashing when it receives an event that we haven’t explicitly told it how to handle.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> def handle_event({:MESSAGE_CREATE, msg, _ws_state}) do
    # IO.inspect(msg)
    case msg.content do
      "!ping" -&gt;
        Api.create_message(msg.channel_id, "pong!")
      _ -&gt;
      	:ignore
    end
 end

 def handle_event(_event) do
    :noop
  end
</code></pre></div></div>

<p>Step 4: Within <code class="language-plaintext highlighter-rouge">lib/my_app/application.exs</code> add your Consumer Supervisor to your start function. This will start our implementation of the Nostrum ConsumerSupervisor within our Supervision tree.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  @impl true
  def start(_type, _args) do
    children = [
      # Start the Telemetry supervisor
      MyAppWeb.Telemetry,
      # Start the Ecto repository
      MyApp.Repo,
      # Start the PubSub system
      {Phoenix.PubSub, name: MyApp.PubSub},
      # Start Finch
      {Finch, name: MyApp.Finch},
      # Start the Endpoint (http/https)
      MyAppWeb.Endpoint,
      MyApp.ConsumerSupervisor
      # Start a worker by calling: MyApp.Worker.start_link(arg)
      # {MyApp.Worker, arg}
    ]

    # See https://hexdocs.pm/elixir/Supervisor.html
    # for other strategies and supported options
    opts = [strategy: :one_for_one, name: MyApp.Supervisor]
    Supervisor.start_link(children, opts)
  end
</code></pre></div></div>

<p>Step 5: Test your application. Start it up with <code class="language-plaintext highlighter-rouge">iex -S mix phx.server</code>, and send your test message “!ping” from Discord. If configured properly, you should see the response “!pong” returned by the bot user to the channel.</p>

<p>That’s the bare necessities, as they are. There’s much more to both Nostrum and the Discord API, but this is all you should need to get up and running. If you found you had any trouble with these instructions, or you think I made a mistake, by all means drop me a DM on <a href="https://twitter.com/StefanSahagian">Twitter</a>.</p>]]></content><author><name></name></author><category term="elixir" /><summary type="html"><![CDATA[In the first three entries in this series I waxed poetic on my approach to personal coding projects. In this entry I’ll get down to business describing how to set up a Discord bot using Nostrum.]]></summary></entry><entry><title type="html">Implementing a Circular Buffer in Elixir</title><link href="http://localhost:4000/elixir/2023/05/24/implementing-a-circular-buffer-in-elixir.html" rel="alternate" type="text/html" title="Implementing a Circular Buffer in Elixir" /><published>2023-05-24T00:00:00-04:00</published><updated>2023-05-24T00:00:00-04:00</updated><id>http://localhost:4000/elixir/2023/05/24/implementing-a-circular-buffer-in-elixir</id><content type="html" xml:base="http://localhost:4000/elixir/2023/05/24/implementing-a-circular-buffer-in-elixir.html"><![CDATA[<p>I recently completed an <a href="https://exercism.org/tracks/elixir/exercises/circular-buffer">Exercism challenge</a> to implement a <a href="https://en.wikipedia.org/wiki/Circular_buffer">circular buffer</a> in Elixir, and I wanted to talk through my solution. I’ve pasted the written instructions for the buffers behavior below, though the test suite had some additional complexity which I’ll try to explain.</p>

<hr />

<p><strong>Instructions</strong></p>

<p>A circular buffer, cyclic buffer or ring buffer is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end.</p>

<p>A circular buffer first starts empty and of some predefined length. For example, this is a 7-element buffer:</p>

<p>[ ][ ][ ][ ][ ][ ][ ]
Assume that a 1 is written into the middle of the buffer (exact starting location does not matter in a circular buffer):</p>

<p>[ ][ ][ ][1][ ][ ][ ]
Then assume that two more elements are added — 2 &amp; 3 — which get appended after the 1:</p>

<p>[ ][ ][ ][1][2][3][ ]
If two elements are then removed from the buffer, the oldest values inside the buffer are removed. The two elements removed, in this case, are 1 &amp; 2, leaving the buffer with just a 3:</p>

<p>[ ][ ][ ][ ][ ][3][ ]
If the buffer has 7 elements then it is completely full:</p>

<p>[5][6][7][8][9][3][4]
When the buffer is full an error will be raised, alerting the client that further writes are blocked until a slot becomes free.</p>

<p>When the buffer is full, the client can opt to overwrite the oldest data with a forced write. In this case, two more elements — A &amp; B — are added and they overwrite the 3 &amp; 4:</p>

<p>[5][6][7][8][9][A][B]
3 &amp; 4 have been replaced by A &amp; B making 5 now the oldest data in the buffer. Finally, if two elements are removed then what would be returned is 5 &amp; 6 yielding the buffer:</p>

<p>[ ][ ][7][8][9][A][B]
Because there is space available, if the client again uses overwrite to store C &amp; D then the space where 5 &amp; 6 were stored previously will be used not the location of 7 &amp; 8. 7 is still the oldest element and the buffer is once again full.</p>

<p>[C][D][7][8][9][A][B]</p>

<hr />

<p>The challenge itself encourages you to leverage Elixir GenServers in your solution, but Agents or even vanilla Processes would be equally valid.  I <code class="language-plaintext highlighter-rouge">use GenServer</code> at the top of my module to inject the GenServer quality of life functions, and then I began implementing the callbacks necessary for using them in the provided functions that the test suite will be testing against. On my first pass, my instinct was to leverage pattern matching on lists to manipulate the ordering of the list. I liked the elegance of this initial solution, but after sleeping on it I realized it could be much more performant. The next day I implemented a second solution, one which is less elegant but certainly faster and more scalable.</p>

<p>As I said, my gut instinct was to leverage pattern matching. Lists in Elixir are effectively linked lists, meaning that internally they are pairs containing the head and the tail of the list. Even a list of one item is actually a list where the head is that item and the tail is an empty list. If I can ensure that the head of the list is always the oldest element, I can enforce a predictable order on the list. In order to do this, I need to implement an insertion method that always adds new items at the very end of the tail. I achieved this through recursively calling <code class="language-plaintext highlighter-rouge">insert/2</code>, pattern matching on the head and tail until the base case is reached (i.e. one item and an empty list). By inserting this way, the oldest item will always be the head of the list. This makes reading from the list simple, as we simply pattern match on the list, returning the head as the value and the tail as the new state. We can enforce our fixed size by returning an error if the length of our list reaches our capacity.</p>

<p>After this all we have left to do is implement the overwrite behavior. We achieve this be simply structuring the callback in a slightly different way to the basic write callback. If we’ve reached capacity, we pattern match on the tail and insert the item using that tail, throwing out the old head. If it hasn’t reached capacity, we can insert as we would normally.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule CircularBuffer do
  @moduledoc """
  An API to a stateful process that fills and empties a circular buffer
  """
  use GenServer
  @impl true
  def init(capacity) do
    {:ok, {capacity, []}}
  end
  @impl true
  def handle_call(:read, _from, state) do
    case state do
      {_capacity, []} -&gt;
        {:reply, {:error, :empty}, []}
      {capacity, [oldest | tail]} -&gt;
        {:reply, {:ok, oldest}, {capacity, tail}}
    end
  end
  @impl true
  def handle_call({:write, item}, _from, {capacity, list} = _state) do
    if length(list) == capacity do
        {:reply, {:error, :full}, list}
    else
      {:reply, :ok, {capacity, insert(list, item)}}
    end
  end
  @impl true
  def handle_call({:overwrite, item},
                 _from, {capacity, 
                [ _head | tail] = list} = _state) 
                do
    if length(list) == capacity do
      {:reply, :ok, {capacity, insert(tail, item)}}
    else
      {:reply, :ok, {capacity, insert(list, item)}}
    end
  end
  defp insert([], item), do: [item]
  defp insert([head | []], item), do: [head| [item | []]]
  defp insert( [head | tail] = _list, item), do: [head | insert(tail, item)]

  @impl true
  def handle_cast(:clear, {capacity, _list} = _state) do
    {:noreply, {capacity, []}}
    end
end
</code></pre></div></div>

<p>This solution has the benefit of being pretty to look at and taking up relatively few lines of code. It also has a blazing fast read time, since the next item we want is always at the front. However, there are a couple of significant drawbacks. For starters, my insertion strategy scales very poorly. Every time I want to insert something I have traverse the entire buffer until I get to the end. For a small buffer this is trivial, but if the buffer grew to thousands or tens of thousands of items in length, I would be waiting around a lot to insert new items. On top of that, by leaning on <code class="language-plaintext highlighter-rouge">length()</code> to determine if I’m at capacity, I’m potentially adding another bottleneck. Under the hood this is an Erlang function and is probably quite fast, but at time of writing I’m not familiar with the Erlang libraries to be certain. A worst case scenario though might have me traversing the entire list twice in a single <code class="language-plaintext highlighter-rouge">write</code> call. While this is still only 2N in Big O, we can definitely do better.</p>

<p>My second solution is fairly simple in concept, relying on the speed of key lookup in maps, but is a little less easy on the eyes:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule CircularBuffer do
  @moduledoc """
  An API to a stateful process that fills and empties a circular buffer
  """
  use GenServer
  @doc """
  Initializes buffer with max capacity, a read index,
  a write index, an available slot counter, and a data store.
  """
  @impl true
  def init(capacity) do
    {:ok, %{cap: capacity, 
            next_read: 1, 
            next_write: 1, 
            slots: capacity, 
            store: init_store(capacity)}
    } 
  end

  defp init_store(capacity) do
    Enum.reduce(1..capacity, %{}, fn x, acc -&gt; Map.put(acc, x, nil) end)
  end

  @impl true
  def handle_call(:read, _from, %{next_read: next_read, store: store} = state) do
    case store[next_read] do
      nil -&gt;
        {:reply, {:error, :empty}, state}
      value -&gt;
        {:reply, {:ok, value}, update_read(state)}
    end
  end

  @impl true
  def handle_call({:write, item}, _from, %{slots: slots} = state) do
    if slots == 0 do
      {:reply, {:error, :full}, state}
    else
      {:reply, :ok, update_write(state, item)}
    end
  end

  @impl true
  def handle_call({:overwrite, item}, _from, %{slots: slots} = state) do
    if slots == 0 do
      {:reply, :ok, update_overwrite(state, item)}
    else
      {:reply, :ok, update_write(state, item)}
    end
  end

  @impl true
  def handle_cast(:clear, state) do 
    {:noreply, %{state | next_read: 1, 
                        next_write: 1, 
                        slots: state.cap, 
                        store: init_store(state.cap)
                }
    }
    end

  defp update_read(%{cap: cap,
    next_read: current_next_read,
    slots: slots,
    store: store} = state) 
  do
      if current_next_read == cap do
      %{state | next_read: 1, 
                slots: slots + 1, 
                store: %{store | current_next_read =&gt; nil}
        }
    else
      %{state | next_read: current_next_read + 1, 
                slots: + 1, 
                store: %{store | current_next_read =&gt; nil}
        }
    end
  end

  defp update_write(%{cap: cap, 
                    next_write: next_write, 
                    slots: slots, 
                    store: store} = state, item) do
    if next_write == cap do
      %{state | next_write: 1, 
                slots: slots - 1, 
                store: %{ store | next_write =&gt; item}
        }
    else
      %{state | next_write: next_write + 1, 
                slots: slots - 1, 
                store: %{store | next_write =&gt; item}
        }
    end
  end

  defp update_overwrite(%{cap: cap, 
                        next_write: next_write, 
                        store: store, 
                        next_read: next_read}= state, item) do
    incoming_next_read = 
        if next_read + 1 &gt; cap do 
            1
        else 
            next_read + 1
        end
    if next_write == cap do
      %{state | next_read: incoming_next_read, 
                next_write: 1, 
                store: %{ store | next_write =&gt; item}}
    else
      %{state | next_read: incoming_next_read, 
                next_write: next_write + 1, 
                store: %{store | next_write =&gt; item}}
    end
  end
end
</code></pre></div></div>
<p>This solution relies on using lookup keys to keep track of where the next item goes, where the next item to read goes, and how many available slots we have. The crux of the solution lies in the init function. I use a range of <code class="language-plaintext highlighter-rouge">1..capacity</code> to create a map where the keys are integers pointing to null values. Our <code class="language-plaintext highlighter-rouge">next_read</code> and <code class="language-plaintext highlighter-rouge">next_write</code> keys keep track of where in the buffer we need to read and write next. This solution is much, much faster, with a worst case Big O of N, where we have to create our buffer of N size once, but never have to fully traverse it again. As we insert and extract items, we update the pointers.</p>

<p>A further improvement on this solution might be to use Streams to lazily load in new chunks of our buffer, rather than build it all at once. Or, more simply, we could simply make the extension of our store be a function of the insertion. Done this way, the store map would begin empty and only have new keys added when a write is performed, emitting an error when a normal write is attempted when our available slots is 0. I believe we could achieve a O(1) with this solution, which is pretty cool.</p>

<p>This was a fun one, and an interesting challenge that still has me thinking of ways to improve on my solutions. Check out a slightly more readable version on my <a href="https://github.com/Shaka-n/elixir-exercism-exercises/blob/main/circular-buffer/lib/circular_buffer.ex">GitHub</a> or <a href="https://exercism.org/tracks/elixir/exercises/circular-buffer/solutions/Shaka-n">Exercism</a> profiles.</p>]]></content><author><name></name></author><category term="Elixir" /><summary type="html"><![CDATA[I recently completed an Exercism challenge to implement a circular buffer in Elixir, and I wanted to talk through my solution. I’ve pasted the written instructions for the buffers behavior below, though the test suite had some additional complexity which I’ll try to explain.]]></summary></entry><entry><title type="html">Developing a Personal Project, Part 3: Planning</title><link href="http://localhost:4000/general/2023/05/15/developing-a-personal-project-part-3.html" rel="alternate" type="text/html" title="Developing a Personal Project, Part 3: Planning" /><published>2023-05-15T00:00:00-04:00</published><updated>2023-05-15T00:00:00-04:00</updated><id>http://localhost:4000/general/2023/05/15/developing-a-personal-project-part-3</id><content type="html" xml:base="http://localhost:4000/general/2023/05/15/developing-a-personal-project-part-3.html"><![CDATA[<p><em>In the last part of this series I discussed in brief my thoughts on the research process. Upon reflection, I realize that that topic deserves a more in-depth discussion, but hopefully it at least gave you an idea of my approach and thought process. In this latest post I will be discussing the last “administrative” step before actually getting into the code: planning.</em></p>

<p>After much research and deliberation you feel it’s time to start coding. You can see your finished project, gleaming in your mind’s eye. But while that complete idea is still fresh it would behoove you to enshrine its likeness in written form: a project overview document. As you knuckle down and start cranking out PRs, your high-level perspective will fade as you become concerned with nitty gritty details. You’re going to switch contexts, wearing the hat of the programmer rather than the project manager. If you don’t write down your plan now, you may find it shifting over time, possibly in very unproductive directions. As you struggle with practical challenges, you may become discouraged or lose sight of your goal. A written roadmap will help guide you, keep you on track, and ultimately tell you when it’s time to stop working.</p>

<p>There are many formal methodologies for organizing a project, and you can choose any or none of them. You can organize your project however you like so long as it provides structure. It may be that you wish to work for a company that uses the Agile method. It could be good practice to organize your project in that style. Maybe you just need a “To Do” list. No matter how you choose to structure your plan, I would hold on to the document. Though uncommon, I have seen some interviewers ask for samples of technical writing. For my part, I am most recently familiar with the ShapeUp method, and so that is my current preference, although as you’ll see I use it mostly as inspiration.</p>

<p>Below you will see the planning document I wrote for my Discord Bot. I begin with a problem statement, followed by potential solutions. I know that I want to build a bot regardless of utility, so this initial part is mostly a mental exercise. Still, I think it’s useful to lay out the problem as it is, along with it’s potential solutions and their pros and cons. In a professional setting, this can help assure you that your plan is sound, or point out flaws in your reasoning.</p>

<p>The following section outlines what features the finished project must have, what it would be nice for it to have, and what it will not have. Here I define in concrete terms how the application will behave, but also what it will not do. As I mentioned in previous posts, be ruthless with scope. Cut away anything that isn’t weight bearing for your central idea. You’ll be grateful for it later.</p>

<p>The last section is where I lay out specific tasks to be completed. In ShapeUp, tasks are organized by “Vertical Slice”, such that when a Slice is completed some increment of value is delivered. Seeing as I’m just one guy, and this is sort of a “draw the rest of the owl” scenario, I opted for horizontal slicing instead. Is this a glorified “To Do” list? Certainly, but it’s no less useful for that fact. At this level, some people like to use project trackers like Trello or a GitHub project, so if I were so inclined I would assign each bullet point to a card.</p>

<p>As I progressed through these tasks, I would update them with notes to keep track of important info like test keys and test user UUIDs. Occasionally, when some aspect of the API did not behave as I expected, I would tweak this document to reflect this new technical reality. For example, when I first laid out my plan I expected to be using the REST API, but then I realized that Nostrum uses the Gateway API and had to adjust accordingly. When I became frustrated with config or a stubborn error, I would refer back to the overview and note how far I had come.</p>

<p>Maybe you’re a 10x sorcerer who doesn’t need this kind of thing. But for a dope like me, staying organized and tracking my progress is critical to maintaining both my productivity and equanimity. See you in part 4, where I actually will show you some code.</p>

<hr />

<p><strong>Discord Bot - Movie Scheduler - Project Overview</strong></p>

<p><em>Problem</em>: My friends and I have trouble remembering when our bi-weekly movie night is scheduled for.</p>

<p><em>Potential Solutions</em>:</p>

<p>Become more mindful of our commitments as a group.<br />
Pros: Humanist. Cons: Hard, unreliable.</p>

<p>Send out google calendar invites when a day is decided on.<br />
Pros: Reliable. Easy. Cons: Boring, tedious. Resembles work too much</p>

<p>One person write down an automated reminder to themselves.<br />
Pros: Very Easy. Cons: unreliable, boring</p>

<p>Create a discord bot that has functionality for recording movie night dates and functionality for sending reminders about the chosen date.<br />
Pros: Fun, good resume project, has scaling potential for other projects. Cons: high effort, overcomplicated</p>

<p><strong>Accepted Solution: Discord Bot</strong></p>

<p>Must Haves:</p>
<ul>
  <li>an application that connects to a discord bot user, deployed in some way that does not rely on a local machine.</li>
  <li>A slash command that accepts a string representing a movie night date and persists it as a date. (i.e. “/movienight schedule 3/6/23”)</li>
  <li>A cron job that monitors the stored dates and sends a message to the discord channel when the chosen date approaches. (i.e. “There’s a movie night this week on Thursday!”)</li>
  <li>proper error messages for misconfigured commands (e.g. “/movienight thrudsay” produces “I don’t understand that command”)</li>
</ul>

<p>Nice To Haves:</p>
<ul>
  <li>Accept multiple date formats (e.g. “/movienight thursday” == <this coming="" thursday="">. "/movienight next thursday" == <the thursday="" after="" the="" coming="" sunday="">, "/movienight Thursday, March 6th")</the></this></li>
  <li>Accepts the movie name as part of the initial scheduling string and returns it as part of the reminder. (e.g. “There’s movie night this week on Thursday! We’re watching Scream 2!”)</li>
  <li>Reschedule command that accepts 2 dates, a previously scheduled movie night and the new chosen date (i.e. /movienight 3/6/23 3/12/23)</li>
  <li>Cancel command: accepts a date and cancels the movie for that date. (e.g. /movienight cancel 3/6/23 -&gt; “Movie canceled for 3/6/23”)</li>
</ul>

<p>Won’t Haves:</p>
<ul>
  <li>Will not process unformatted strings (e.g. /movienight 2 weeks from now. /movienight schedule a movie for next friday)</li>
  <li>Will not accept mispelled days</li>
  <li>Will not play spotify songs</li>
</ul>

<p>(Horizontal Slicing due to manpower issues)</p>

<p>Slices:</p>
<ul>
  <li>Slice 1 (CRUD Stuff):
    <ul>
      <li>create database to store movie night data
        <ul>
          <li>for dev purposes, this is handled already. We’ll need to figure out the deploy situation later though.</li>
        </ul>
      </li>
      <li>create migration for movienight table
        <ul>
          <li>what fields does a movienight need? datetime, movie title, creator id (discord user id?). Can’t think of any others</li>
        </ul>
      </li>
      <li>create schema for movienight
        <ul>
          <li>date must be unique, spit out error when creating a movie night when one is already booked for that date</li>
        </ul>
      </li>
      <li>create context for CRUD movienights
        <ul>
          <li>required functions:
            <ul>
              <li>create
                <ul>
                  <li>collision logic for existing movie nights?</li>
                </ul>
              </li>
              <li>get movie night by date</li>
              <li>get next movie night</li>
              <li>update movie night with new date (and/or movie)</li>
              <li>cancel/delete movie night</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>create functions for parsing movienight input strings into dates</li>
      <li>write tests</li>
    </ul>
  </li>
  <li>Slice 2 (The Cron Stuff):
    <ul>
      <li>import Oban (or other cron scheduler?)</li>
      <li>create cron job to monitor movie queue</li>
      <li>create worker to trigger reminders</li>
      <li>write tests</li>
    </ul>
  </li>
  <li>Slice 3 (The Discord Stuff):
    <ul>
      <li>create module for sending reminder messages to the channel</li>
      <li>register a new slash command for scheduling movie night</li>
      <li>register slash command for checking movie night</li>
      <li>register slash command for rescheduling movie night</li>
      <li>register slash command for canceling movie night</li>
      <li>create gateway event handler consumer to accept data from slash command</li>
      <li>persist data received by consumer</li>
      <li>write tests (includes integration)</li>
    </ul>
  </li>
</ul>

<p>Useful Info:</p>
<ul>
  <li>Test Server Guild Id: ‘<strong>**</strong><strong>**</strong>**’</li>
  <li>Application Id: ‘<strong>**</strong><strong>**</strong>**’</li>
</ul>]]></content><author><name></name></author><category term="General" /><summary type="html"><![CDATA[In the last part of this series I discussed in brief my thoughts on the research process. Upon reflection, I realize that that topic deserves a more in-depth discussion, but hopefully it at least gave you an idea of my approach and thought process. In this latest post I will be discussing the last “administrative” step before actually getting into the code: planning.]]></summary></entry><entry><title type="html">Manipulating Bitstrings in Elixir</title><link href="http://localhost:4000/elixir,%20quick%20tips/2023/05/14/manipulating-bitstrings-in-Elixir.html" rel="alternate" type="text/html" title="Manipulating Bitstrings in Elixir" /><published>2023-05-14T00:00:00-04:00</published><updated>2023-05-14T00:00:00-04:00</updated><id>http://localhost:4000/elixir,%20quick%20tips/2023/05/14/manipulating-bitstrings-in-Elixir</id><content type="html" xml:base="http://localhost:4000/elixir,%20quick%20tips/2023/05/14/manipulating-bitstrings-in-Elixir.html"><![CDATA[<p>Per the <a href="https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html#bitstrings">official documentation</a>, bitstrings are a fundamental data type in Elixir representing a contiguous sequence of bits in memory. Useful for UTF-8 encodings and other fun things like secret obfuscation, bitstrings are a great tool to have in your back pocket. Instead of parroting existing documentation, I wanted to share a little nuance that I had trouble grasping while I was learning about this data type.</p>

<p>When you concatenate, prepend, or append bitstring literals in a bitstring special form(i.e. «value::size»), the output format can look very different from the input format. If your output produces a valid UTF-8 encoded character, you will get that character. If the result of the concatentation would overflow 8 bits (the maximum), then the result will be whatever integer is represented by that 8-bit value, and then a bitstring literal comprised of the remainder. For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>value = &lt;&lt;0b110::3, 0b001::3&gt;&gt;
new_value = &lt;&lt;0b011::3, value::bitstring, 0b000::3&gt;&gt;
# =&gt; &lt;&lt;120, 8::size(4)&gt;&gt;
</code></pre></div></div>

<p>In this example we are both prepending and appending bitstring literals to the original bitstring value, which you can visualize like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;&lt;0b011::3, 0b110::3, 0b001::3, 0b000::3&gt;&gt;
</code></pre></div></div>

<p>You’ll notice that there are more than 8 bits in this intermediate representation. Since we obviously cannot have more than 8 bits in a bitstring, we need to do something with the extra bits. Elixir will take the first 8 bits provided and return them as an integer(i.e. 120). The reason for this is that a bitstring comprised of 8-bytes is what is called a binary, and is treated differently than other bitstrings. Put in the official terms, a binary is a bitstring that is divisible by 8. All binaries are bitstrings, but not all bitstrings are binaries. The remaining bits from out intermediate representation will be returned as a bitstring literal, using the verbose syntax (i.e. 8::size(4)). Taking it further, what happens if we have many more bits?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;&lt;0b011::3, 0b110::3, 0b001::3, 0b000::3, 0b001::3, 0b010::3&gt;&gt;
# =&gt; &lt;&lt;120, 130, 2::size(2)&gt;&gt;
</code></pre></div></div>

<p>So you see, bitstrings concatenated/appended/prepended in this way will return integers from the leading 8-bit fragments, and return the remaining bits as bitstring literals in the verbose syntax.</p>

<p>This was very confusing for me when I first learned it, so I hope this helps someone. This is by no means a complete explanation of bitstrings, so for more on bitstrings, check out the <a href="https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html">official docs</a>.</p>]]></content><author><name></name></author><category term="Elixir, Quick Tips" /><summary type="html"><![CDATA[Per the official documentation, bitstrings are a fundamental data type in Elixir representing a contiguous sequence of bits in memory. Useful for UTF-8 encodings and other fun things like secret obfuscation, bitstrings are a great tool to have in your back pocket. Instead of parroting existing documentation, I wanted to share a little nuance that I had trouble grasping while I was learning about this data type.]]></summary></entry><entry><title type="html">Developing a Personal Project, Part 2: Research</title><link href="http://localhost:4000/general/2023/05/12/developing-a-personal-project-part_2.html" rel="alternate" type="text/html" title="Developing a Personal Project, Part 2: Research" /><published>2023-05-12T00:00:00-04:00</published><updated>2023-05-12T00:00:00-04:00</updated><id>http://localhost:4000/general/2023/05/12/developing-a-personal-project-part_2</id><content type="html" xml:base="http://localhost:4000/general/2023/05/12/developing-a-personal-project-part_2.html"><![CDATA[<p><em>In the first part of this series, I explained my reasoning around the broad choices that you can make at the start of a personal project. In this second part, I will discuss the logical next step: research.</em></p>

<p>At the end of the last blog post, I described how I resolved to make a Discord chat bot using Elixir. With this concrete goal firmly set in mind, I can now go about researching how to best use these tools. This can be a very open-ended process, ranging in complexity from querying a ChatGPT sesssion, to blindly Googling questions until a vague idea forms in my mind, to performing comprehensive analyses of technical documentation. I recommend a slow and thorough approach at this stage. Misreading documentation early on can have you spinning your wheels for hours or even days when it comes time to implement basic features. Coming across a new framework may tempt you to alter your set objective, taking you nearly back to square one. Much as with the objective setting process, the technical research process is an opportunity to limit the scope of your project and speed you on your way to success. In short, take your time.</p>

<p>Given my objective, there were two natural starting points for research: the Discord API, and the Elixir application. Seeing as I’m already familiar with building Elixir apps, I started by reading the <a href="https://discord.com/developers/docs/intro">Discord documentation</a>. Discord has built a powerful web API for interacting with their platform. They give developers access to a wide gamut of resources, some of which are very exciting to consider, like playing sounds via the voice channels. But I’m just here to make a digital assistant, so I’m interested in two things: creating a persistent connection between an Elixir application and passing data between that application and Discord.</p>

<p>Reading through the <a href="https://discord.com/developers/docs/getting-started">Getting Started</a> guide, I learn that there are three things I need before I can break ground on any code. Firstly, I need a Discord account, which conveniently I already have. Secondly, I need to register a new application on Discord’s developer portal. Thirdly, I need to register a new bot user. This is a key distinction that may help avoid some confusion down the line: your application, your code, is running as any application would, either locally on your machine, or on a hosting service (e.g. fly.io). Meanwhile the “bot” is actually just a “user” that is added as a member to a given Discord server/guild. The bot can be given any permissions that a user can have, and it acts as the visible presence of your application within the server. Any number of servers can have a bot user connecting to your application (though over a certain threshold of servers Discord imposes a review process).</p>

<p>Once I have my bot user ready, I encounter my first technical decision: WebSockets vs. REST. Discord actually has two APIS, one called the Gateway API which is WebSockets-based, and another which uses a classic REST-like pattern. There’s plenty of strengths and weaknesses to consider between these two approaches at scale. HTTP endpoints are more widely adopted and supported, but can have trouble with concurrent requests. WebSockets connections provide truly realtime communication, but they’re not supported by older browsers and you must implement a protocol for recovering terminated connections yourself. These considerations prompt a followup question: do I want to implement the logic for the network requests myself, or do I want to use an existing library? To help make this decision, I revisit my goal of deploying this app. Writing my own WebSockets connection would be a good exercise, but with experience comes humility, and I’m quite certain that my boilerplate WebSockets code will not be as reliable as that of an open source community. A compromise, for learning’s sake, would be to read and understand the source code. At the end of the Getting Started guide, I found a link to a Community Resources page: in other words, links to wrapper libraries. A wrapper library provides methods for interacting with an API in the language of your choice. Any API of notable popularity will have a host of these. Most Discord libraries seem to be for Javascript, but a quick Google search finds an Elixir one for me: <a href="https://github.com/Kraigie/nostrum">Nostrum</a>. The documentation seems robust enough, and there’s an active community around the project. A quick peruse of the docs shows me that Nostrum implements a WebSockets connection to the Gateway API, and just like that my decision is made for me. I can make decent headway while learning from an open source project.</p>

<p>In the next post I’ll talk about my system design and how my research distills into a planning document.</p>]]></content><author><name></name></author><category term="General" /><summary type="html"><![CDATA[In the first part of this series, I explained my reasoning around the broad choices that you can make at the start of a personal project. In this second part, I will discuss the logical next step: research.]]></summary></entry></feed>