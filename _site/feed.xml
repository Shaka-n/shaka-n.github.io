<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-12T10:13:53-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Stefan Sahagian</title><subtitle>This is my personal website and blog. Here I write about coding and personal projects.</subtitle><entry><title type="html">How to Develop a Personal Project, or ‘Will Work for Work’</title><link href="http://localhost:4000/general/2023/05/11/developing-a-personal-project-part_1.html" rel="alternate" type="text/html" title="How to Develop a Personal Project, or ‘Will Work for Work’" /><published>2023-05-11T00:00:00-04:00</published><updated>2023-05-11T00:00:00-04:00</updated><id>http://localhost:4000/general/2023/05/11/developing-a-personal-project-part_1</id><content type="html" xml:base="http://localhost:4000/general/2023/05/11/developing-a-personal-project-part_1.html">&lt;p&gt;Self-taught, bootcamp, or college grad, we’re all under the gun to develop software in our free time. It’s an expectation of the field that as a developer that you are constantly learning and making things on your own. The Man wants to see a green commit history. But where to start? The blank canvas is intimidating. Having faith in your current efforts, keeping morale high, can be difficult. In this short blog series, I will break down my most recent approach to this process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set Your Goals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don’t know why you’re doing something, you will lose focus and flounder. A mid-term goal like “build a website” provides a more satisfying context from which to monitor progress than “get rich”. The more specific your objective, the more confident you will be in your ability to complete the project. Confidence is everything when you’re flying solo.&lt;/p&gt;

&lt;p&gt;Resolving to “build a portfolio project to learn Python” is more specific in this way and will help to set boundaries around your project. Indeed, it can be just as important to lay out what you will &lt;em&gt;not&lt;/em&gt; do. You could limit your project to a CLI tool, accessible only through shell commands, or a static webpage hosted on Github Pages. In doing so, you preclude many extraneous considerations that would otherwise distract you, and as a result produce something significantly more polished and impressive.&lt;/p&gt;

&lt;p&gt;My goal this time around is indeed “get rich,” (&lt;em&gt;cough&lt;/em&gt; hire me) but as I said this is too open ended. I resolved to build a portfolio project as a digestible chunk of this larger effort. I knew that I wanted to focus on backend over frontend features as well as deploy it in some capacity. I like Elixir as a language and would like to learn more about it. So my goal is “build a backend-only portfolio project using Elixir.”&lt;/p&gt;

&lt;p&gt;The first piece of advice that people will give you in regards to starting personal projects will be something along the lines of “make something related to your interests.” I would tend to agree, with an asterisk attached. Depending on your skill level, you may not be capable of producing what you envisioned or even something with utility. This can be upsetting to discover, but is to be expected. Personal projects are meant to demonstrate that you can do the work, nothing more. If you find yourself trying to build Salesforce or &lt;em&gt;League of Legends&lt;/em&gt; from scratch, I would rephrase the advice above: “let your interests inform the aesthetic of your personal project”. Do you like trading cards? Make a static page that serves up digital trading cards. Do you like sports? Query an open API to display the latest match data from the game of your choice. Are either of these things necessarily useful? Not really. But they provide a theme that can help you design your frontend, and a purpose around which to design your backend. It’s all just wallpaper, and we’re putting up sheetrock.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decide What You’re Building&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Too often have I fallen into the trap of trying to make something “that I would use.” All I’m saying is that you don’t have to be so hard on yourself. If you’re stubborn like me and really &lt;em&gt;need&lt;/em&gt; the project to have some sort of larger purpose, label it a prototype or proof of concept. It’s important to make things easy for yourself at this stage.&lt;/p&gt;

&lt;p&gt;I use Discord all the time. I use it to talk to friends and generally have fun using it. Discord has a robust open API for interacting with individual servers (also known as Guilds). It seemed like it would be fun to build something that my friends and I could get a laugh out of. So I asked them: how would you like a chatbot? what would you like it to do? Discounting joke replies, they answered: be a digital assistant.&lt;/p&gt;

&lt;p&gt;We have bi-weekly movie nights, and for some reason no one can muster enough mental rigor to remember which day we agreed to hold them. I would build a chatbot that remembered when movie night was. Would I &lt;em&gt;really&lt;/em&gt; use this? Not really. Any one of us could just write down the date in any of a thousand reminder applications, and that’s not even considering a sticky note. Rather than build something “useful”, this idea furnishes a conceit upon which to build my project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose Your Tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After resolving in your mind this aesthetic or theme, you can start making technical choices. What languages do you know best or want to learn? What tools are most easily in reach? This is another opportunity to limit the scope of your project. Building a new HTTP library for Node might be an excellent learning opportunity, but it’s hardly an efficient use of your time. It’s all about balancing how much you value the learning compared to the finished product. All that being said, do what makes you the most excited to tackle the project, as your own enthusiasm will be what drives you across the finish line.&lt;/p&gt;

&lt;p&gt;For the past two years I’ve been mostly developing in Elixir. As I said, I like the language, and I’d like to learn more about it as well. In terms of technical suitability, it lends itself well to fault-tolerant, scalable systems, though that is somewhat irrelevant (or so I thought) in the context of a chatbot for my immediate friends and I. So Elixir it is. As for libraries, a quick Google search tells me there are a few open-source libraries that can act as a wrapper for handling API calls to Discord’s API. I’d like to deploy this bot to production at some point, and Fly.io is quite cheap at the base tier. With these broad strokes in mind, I feel I’m ready to start building. Just kidding, now I’m ready to start planning. See you in part 2.&lt;/p&gt;</content><author><name></name></author><category term="General" /><summary type="html">Self-taught, bootcamp, or college grad, we’re all under the gun to develop software in our free time. It’s an expectation of the field that as a developer that you are constantly learning and making things on your own. The Man wants to see a green commit history. But where to start? The blank canvas is intimidating. Having faith in your current efforts, keeping morale high, can be difficult. In this short blog series, I will break down my most recent approach to this process.</summary></entry><entry><title type="html">Ruby Enumerables Series: Chain</title><link href="http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-chain.html" rel="alternate" type="text/html" title="Ruby Enumerables Series: Chain" /><published>2020-09-27T16:11:00-04:00</published><updated>2020-09-27T16:11:00-04:00</updated><id>http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-chain</id><content type="html" xml:base="http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-chain.html">&lt;p&gt;Ruby Enumerables Series: Chain&lt;/p&gt;

&lt;p&gt;This week I’m continuing the enumerables series with chain. It’s a relatively simple enumerable, so this may be an entry that I return to to flesh out later. I have a hunch that there are a number of methods that are logically connected with each other that aren’t necessarily next to each other in the docs. So if for some reason somebody is keeping track, I might return to this one to flesh it out more with references to related methods.&lt;/p&gt;

&lt;p&gt;Moving on, chain is slightly meta, in that it allows you to return an enumerato object from an enumerator and an enumerable. In Ruby, the Enumerator class which allows for internal or external iteration. The Iterator is a design pattern that goes beyond the scope of this blog post, but suffice to say that an external iterator is something that acts on a collection from outside, and an internal iterator is something that acts on a collection from within the collection. Said differently, an external iterator is a method waiting for a collection to be passed to it as an argument, while an internal iterator is a method that is already available to a collection that allows it to traverse through itself. I would love to go on, but I have to find a way to fit some code in here.&lt;/p&gt;

&lt;p&gt;Basically, you invoke chain on an enumerable and you give chain another enumerable as an argument. It will return an instance of the Enumerator class which can be converted to an array or hash depending on your needs. It chains the two enumerables together.&lt;/p&gt;

&lt;p&gt;Most simply, this can be used to combine two arrays:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array1 = [1,2,3]
array2 = [4,5,6]

enumerator = array1.chain(array2)

enumerator.to_a

# =&amp;gt; [1, 2, 3, 4, 5]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also use it to chain an array and a hash (they are both enumerables), but the results are a little odd:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
array = [1,2,3]
hash = {a =&amp;gt; 4, b =&amp;gt; 5}

enumerator = array.chain(hash)

enumerator.to_a

# =&amp;gt; [1, 2, 3, ['a', '4'], ['b', '5']]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Attempting to convert the enumerator to a hash throws an error, so you can only convert this to an array. For now I can only speculate as to when I might want to add hash values to an array, but preserve the relation between key and value by nesting them together in a sub-array. It would be less performant in any case that I can think of, so if anyone can think of a time that they would do this, please drop me a line. Maybe I’m just missing something.&lt;/p&gt;

&lt;p&gt;For now, that’s chain. Next week I’m thinking of taking a crack at Sass, so hopefully we’ll get a longer post out of that.&lt;/p&gt;</content><author><name></name></author><category term="Ruby" /><summary type="html">Ruby Enumerables Series: Chain</summary></entry><entry><title type="html">Ruby Enumerables Series: Any or All?</title><link href="http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-any-all.html" rel="alternate" type="text/html" title="Ruby Enumerables Series: Any or All?" /><published>2020-09-27T06:35:01-04:00</published><updated>2020-09-27T06:35:01-04:00</updated><id>http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-any-all</id><content type="html" xml:base="http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-any-all.html">&lt;p&gt;Ruby Enumerables Series: Any or All?&lt;/p&gt;

&lt;p&gt;Last week I wrote about the reduce method and how it’s implemented in Javascript. Continuing on that theme, let’s switch gears and look at the baked in enumerables found in Ruby. Ruby’s Enumerable mixin has a ton of unique, built-in methods that can make your life a whole lot easier if you take the time to learn when to use them. I barely even know 10% of them, which is why I’m going to try and least learn what they all do at a glance. In all, there are 59 unique instance methods, but some are just inversions of other methods, so I’m not going to write an entire blog for each. Instead, I’m going to do my best to group the most closely related methods together and explain them in assocation with one another. First up: any? and all?.&lt;/p&gt;

&lt;p&gt;All is a very simple method: it accepts a code block, passes each element in the collection to the block in turn, and returns true if the block never returns false or nil. This might look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array = [1,4,7,9]

array.all? {|n| n &amp;lt; 10}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return true because all of the elements are less than 10. Easy. It has an even simpler implementation. If you pass an array to all? without a code block, it will return true as long as none of the elements are false or nil.&lt;/p&gt;

&lt;p&gt;Inverting this concept, any? accepts a code block, passes each element in the collection to the block in turn, and returns true if the block ever returns false or nil. In the above example, using any? would return false. However, the below example will return true:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
array = [1,2,3,&quot;4&quot;]

array.any? {|n| n.is_a?(String)}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here all we are checking for is whether or not any of the elements are strings. Since the fourth element is the string “4”, any? returns True. Similarly to all?, any? can also be used without providing a code block. In this case, it will return true if at least one of the elements is not false or nil.&lt;/p&gt;

&lt;p&gt;I should make a note of the third usage for any? and all? tha has only been added: pattern matching. Pattern matching is a bit beyond the scope of this blog entry, but in essence, it allows you to provide a pattern with certain known values and certain unknown values to be expected by a block of code. I myself don’t full grasp the power of this, but my understanding is that it allows you to be much more concise, which of course we love. In the case of all?, it will return whether the expected pattern matches for every collection member. In the case of any? it will return wehter the expected pattern matches for any collection member.&lt;/p&gt;

&lt;p&gt;That’s any and all. Perhaps next week we’ll dive further into pattern matching.&lt;/p&gt;</content><author><name></name></author><category term="Ruby" /><summary type="html">Ruby Enumerables Series: Any or All?</summary></entry><entry><title type="html">Reductive</title><link href="http://localhost:4000/javascript/2020/09/19/reductive.html" rel="alternate" type="text/html" title="Reductive" /><published>2020-09-19T12:12:01-04:00</published><updated>2020-09-19T12:12:01-04:00</updated><id>http://localhost:4000/javascript/2020/09/19/reductive</id><content type="html" xml:base="http://localhost:4000/javascript/2020/09/19/reductive.html">&lt;p&gt;The reduce method is a powerful tool built into vanilla Javascript that can do a lot of heavy lifting for a software developer. Knowing how to use it can distinguish an experienced programmer from her less experienced peers. However, reduce is not as straightforward to use  as the other enumerators built into vanilla JS. Few problems actually call for it, and using reduce unnecessarily can prove to be far more trouble than it’s worth. If we’re going to understand how to use reduce, we first need to understand what it is and when it is best employed.&lt;/p&gt;

&lt;p&gt;Broadly speaking, a reducer is a logic tool that distills a refined data point from a larger data set. If the data set is a stew, the reducer is the stovetop which will “boil it down” to a more refined product. Different languages approach this concept in slightly different ways. In Javascript, a reducer looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
const array = [1, 4, 8, 5]
const reducer = (accumulator, currentValue) =&amp;gt; accumulator + currentValue

console.log(array.reduce(reducer))

output: 18

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s happening here is very interesting. I am calling the reduce method on my array, and then I am passing my custom reducer function to the reduce method. What’s interesting about this is that my custom reducer can be basically anything. In this case, I’m just summming each entry with the accumulator’s current value. In short, I’m summing the array. The nature of the reduce method saves the result of this expression in the accumulator variable for the next pass of the array, so all I have to do is decide what will be done upon each visit to an entry in the array. You might have already guessed, but this means that I can use reduce whenever I want. I could always use reduce! Who needs map anyway? But this is, of course, a trap.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const array = [2, 8, 11, 19]
const reducer = (accumulator, currentValue) =&amp;gt;  currentValue % 2 == 0 ? accumulator + currentValue : accumulator

console.log(array.reduce(reducer))

output: 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reduce method is generally intended for a specific purpose: merging data. In the example above, I’m just filtering for even values. And it doesn’t even work that well! Do you need the value of a single entry from the data set? Use the find method. Do you need a subset of the original dataset? Use the filter method. There a ton of built in tools that can be fit to the problem at hand. Do you need to return a single value that must be influenced by every entry in an array? Then the reduce method might be a good pick. But there is an additional consideration to make before committing to this path: do your coworkers know how to use reduce? Are you the only one within arm’s reach that knows how to debug it? I personally have known devs with many years more experience than myself that get by every day with just the map enumerator. Without casting aspersions, it’s important to note that while using cool tools is fun, it’s not always very practical. So when exactly should you use reduce? Well, there’s no one answer. But from what I understand, the best time to use reduce is when you want to both return a smaller portion of data while also performing some operation when stopping at each entry. It’s at this point that using reduce becomes more efficient and it’s time to start breaking out your accumulators.&lt;/p&gt;</content><author><name></name></author><category term="Javascript" /><summary type="html">The reduce method is a powerful tool built into vanilla Javascript that can do a lot of heavy lifting for a software developer. Knowing how to use it can distinguish an experienced programmer from her less experienced peers. However, reduce is not as straightforward to use as the other enumerators built into vanilla JS. Few problems actually call for it, and using reduce unnecessarily can prove to be far more trouble than it’s worth. If we’re going to understand how to use reduce, we first need to understand what it is and when it is best employed.</summary></entry><entry><title type="html">Externalizing Thoughts</title><link href="http://localhost:4000/meta,/productivity,/applications/2020/09/10/20-externalizing-thought.html" rel="alternate" type="text/html" title="Externalizing Thoughts" /><published>2020-09-10T12:12:01-04:00</published><updated>2020-09-10T12:12:01-04:00</updated><id>http://localhost:4000/meta,/productivity,/applications/2020/09/10/20-externalizing-thought</id><content type="html" xml:base="http://localhost:4000/meta,/productivity,/applications/2020/09/10/20-externalizing-thought.html">&lt;p&gt;I’ve used dozens of note taking applications in my life. The unspoken question is: why? In the years before cloud storage note apps, MS Word was good enough for me. I had a folder called “Documents,” which in itself contained more folders called banal things like “School,” or “Receipts,” or “Restricted Access, Do Not Open!!” Things were simpler, and I felt organized, clean, and in control of my extra-cerebral faculties. More on that later. Then one day, The Cloud rolled into town.&lt;/p&gt;

&lt;p&gt;After looming on the horizon for decades, infrastructure and manufacturing developments finally ushered in (what I consider to be) the more substantive version of the cloud – i.e. a paradigm shift away from local storage in client machines. In the enterprise world, this translated to tectonic shifts in the market, far beyond the scope of this blog. But to the user, this meant a fundamental cognitive shift. For this user in particular, it meant an end to that feeling of clean organization and the beginning of the endless search for The Note App.&lt;/p&gt;

&lt;p&gt;Most famously, Google Docs arrived on the scene in 2006. Offering a stripped down word processing experience that would be familiar enough to MS Word users to be usable, and free enough to be attractive to students and low income users. Its early iterations were a bit unreliable, and there was no need to switch right away since so many people had been forced to purchase a license to MS Word for their existing needs. Keep in mind this was back when one could still buy a non-expirant software license. One didn’t consider Google Docs until one had to buy a new computer because one’s old MS Office license would not be transferable between machines. So, do you shell a couple hundred bucks for the massively bloated MS Office? What about just buying a license for MS Word? (Don’t even get me started on OpenOffice.)&lt;/p&gt;

&lt;p&gt;Personally, this decision came up when I went off to college in 2011. Luckily for me, my university offered discounted licenses. Not everyone was so fortunate, and those that couldn’t justify the expense began to make the switch. For an individual user this was a relatively trivial decision. But at the level of the organization and enterprise, this became a serious matter. Does everyone really need MS Word? They’re just writing up reports, papers, notes, etc. Do they need all of those features? What’s better than free?&lt;/p&gt;

&lt;p&gt;As The Cloud matured, and the choice between bloated vs. free became more prevalent, businesses adopted it and users became acustomed to it. Rome fell, and the provinces began to splinter into the galaxy of note taking and productivity apps that you see today. It’s not uncommon now for a billion dollar corporation to equip the entirety of it’s workforce with Google Suite, and Microsoft of course offers it’s own cloud solutions. But that’s for the punters. The real heads know that you gotta have a cool note-taking app.&lt;/p&gt;

&lt;p&gt;What’s a “cool” note-taking app? I’m talking about Notion, Bear, Evernote, OneNote, SimpleNote, Roam Research, Google Keep, Apple Notes, Ulysses, Standard Notes, etc. I’m talking about using an IDE like Atom as a content management sytem for your personal website. I’m talking about using Jekyll and markdown to make a blog for GitHub Pages (&lt;em&gt;cough&lt;/em&gt;). I’m talking about using Ommwriter to completely cut yourself off from distraction so you can focus on the important work of paying attention to what you’re typing. I’m talking about a custom-built, tailored solution for the dramatically important task of writing something down so you don’t lose track of the information. But which one to use?&lt;/p&gt;

&lt;p&gt;There are of course, pros and cons to each. So many pros and cons, that reaching a decision becomes overwhelming. Evernote is slow and of dubious longevity, but has great organizational tools. Bear is simple and straightforward, limitingly so. Google Keep is most effectively used as a kind of digital sticky note. Google Docs is a full bore word processor at this point, but also has some gaps in its feature set that become apparent as soon as you begin to consider more complex formatting. The obvious choice would be to try all of them and see which one works best for you. Do you have time for that? How long do you have to use an application before you can reach a definitive conclusion on its efficacy? A day? A week? In this search for the perfect word processor, are you concerned about losing any documents of even middling importance? Where do the actual files live? Do they automatically save them as files at all? Or do you have to manually export each of them? We haven’t even begun to consider the security of these applications and how exactly they manage to make them free (i.e. they’re not free, they scan your documents for meta data to sell to researchers and marketers). It’s all a very complex calculation for what should be a simple problem, and the opportunity cost is potentially massive.&lt;/p&gt;

&lt;p&gt;At this point, you may have noticed that I’ve been lumping together apps that might not deserve to be compared to each other. Google Docs and Bear are two different products that are supposed to have two different applications. This is where I want to make my actual point: if they are not, they should be.&lt;/p&gt;

&lt;p&gt;The need to be able to commit complex thought to an external medium and relate it to other complex thoughts within the same or similar medium is the ultimate end goal of “the note taking app.” Further, this is largely the end goal of information science and the internet in general. The process of developing and abstracting the note taking app is a process wherein industry is engaged with this problem of expanding human consciounesses to an external medium. I would argue that the smaller, spin-off products of this endeavor (i.e. Keep, Bear, etc.) are commodifications of the progress towards this end goal, and in fact actually hamper progress towards it. Because, ultimately, there should only be one note taking app. You should be able to write a one line file that reminds you about your dentist appointment. You should be able to write a novel. You should be able to keep a vast collection of research notes and interconnect nodes within your own body of work with nodes within the body of work of another. All of these tasks are extensions of conscious thought, and as such, deserve to be nodes within the same system. Would you connect your dentist appointment to your thesis paper? Probably not. But no thought exists in a vacuum, and it should be a matter of choice what belongs in a given network, not a matter of incompatible systems. Plus, a user simplely shouldn’t have to maintain all of these separate applications. Unfortunately, I highly doubt that we will see such an application within our lifetime.&lt;/p&gt;

&lt;p&gt;If there is one product, there will be two. Artificial choice will be generated by corporations attempting to create fissures in the consumer base through marketing and circumstance created by high-level business manuveuring. If the one, omnipotent Note Taking App is finally developed by one company, it will swiftly be duplicated by rivaling firms. Users will be divided along lines of legacy systems and short-term incentives. Your employer will use Omni-App Alpha, but you will have been accustomed to using Omni-App Omega at school, and you will forever be forced to jump between the two, largely, similar, but frustratingly different and incompatible interfaces.&lt;/p&gt;

&lt;p&gt;So what to do? Get off the grid: forsake your material possessions and return to the forest. Write all of your documents as .txt files and store them in a folder on a custom Linux distro. Perhaps back up this parent folder in an external harddrive and bury it in the earth. Copy and paste your documents into the CMS of the day. Take up scrimshaw and worship the moon.&lt;/p&gt;

&lt;p&gt;There is no right answer, unfortunately. Commitment to a given product will give you a sense of organization and clarity for a time, but it by no means will save you from eventually being forced or enticed into a new product. Assigning specific use cases to different apps can give you a sense of (useful) functional fixedness that can boost focus. But you will still need 3-4 applications, and at times just as many sets of login credentials. Unfortunately, I think this will be my solution for the forseeable future.&lt;/p&gt;</content><author><name></name></author><category term="Meta," /><category term="Productivity," /><category term="Applications" /><summary type="html">I’ve used dozens of note taking applications in my life. The unspoken question is: why? In the years before cloud storage note apps, MS Word was good enough for me. I had a folder called “Documents,” which in itself contained more folders called banal things like “School,” or “Receipts,” or “Restricted Access, Do Not Open!!” Things were simpler, and I felt organized, clean, and in control of my extra-cerebral faculties. More on that later. Then one day, The Cloud rolled into town.</summary></entry></feed>