<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-25T15:09:55-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Stefan Sahagian</title><subtitle>This is my personal website and blog. Here I write about coding and personal projects.</subtitle><entry><title type="html">Implementing a Circular Buffer in Elixir</title><link href="http://localhost:4000/elixir/2023/05/24/implementing-a-circular-buffer-in-elixir.html" rel="alternate" type="text/html" title="Implementing a Circular Buffer in Elixir" /><published>2023-05-24T00:00:00-04:00</published><updated>2023-05-24T00:00:00-04:00</updated><id>http://localhost:4000/elixir/2023/05/24/implementing-a-circular-buffer-in-elixir</id><content type="html" xml:base="http://localhost:4000/elixir/2023/05/24/implementing-a-circular-buffer-in-elixir.html">&lt;p&gt;I recently completed an &lt;a href=&quot;https://exercism.org/tracks/elixir/exercises/circular-buffer&quot;&gt;Exercism challenge&lt;/a&gt; to implement a &lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_buffer&quot;&gt;circular buffer&lt;/a&gt; in Elixir, and I wanted to talk through my solution. I’ve pasted the written instructions for the buffers behavior below, though the test suite had some additional complexity which I’ll try to explain.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Instructions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A circular buffer, cyclic buffer or ring buffer is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end.&lt;/p&gt;

&lt;p&gt;A circular buffer first starts empty and of some predefined length. For example, this is a 7-element buffer:&lt;/p&gt;

&lt;p&gt;[ ][ ][ ][ ][ ][ ][ ]
Assume that a 1 is written into the middle of the buffer (exact starting location does not matter in a circular buffer):&lt;/p&gt;

&lt;p&gt;[ ][ ][ ][1][ ][ ][ ]
Then assume that two more elements are added — 2 &amp;amp; 3 — which get appended after the 1:&lt;/p&gt;

&lt;p&gt;[ ][ ][ ][1][2][3][ ]
If two elements are then removed from the buffer, the oldest values inside the buffer are removed. The two elements removed, in this case, are 1 &amp;amp; 2, leaving the buffer with just a 3:&lt;/p&gt;

&lt;p&gt;[ ][ ][ ][ ][ ][3][ ]
If the buffer has 7 elements then it is completely full:&lt;/p&gt;

&lt;p&gt;[5][6][7][8][9][3][4]
When the buffer is full an error will be raised, alerting the client that further writes are blocked until a slot becomes free.&lt;/p&gt;

&lt;p&gt;When the buffer is full, the client can opt to overwrite the oldest data with a forced write. In this case, two more elements — A &amp;amp; B — are added and they overwrite the 3 &amp;amp; 4:&lt;/p&gt;

&lt;p&gt;[5][6][7][8][9][A][B]
3 &amp;amp; 4 have been replaced by A &amp;amp; B making 5 now the oldest data in the buffer. Finally, if two elements are removed then what would be returned is 5 &amp;amp; 6 yielding the buffer:&lt;/p&gt;

&lt;p&gt;[ ][ ][7][8][9][A][B]
Because there is space available, if the client again uses overwrite to store C &amp;amp; D then the space where 5 &amp;amp; 6 were stored previously will be used not the location of 7 &amp;amp; 8. 7 is still the oldest element and the buffer is once again full.&lt;/p&gt;

&lt;p&gt;[C][D][7][8][9][A][B]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The challenge itself encourages you to leverage Elixir GenServers in your solution, but Agents or even vanilla Processes would be equally valid.  I &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use GenServer&lt;/code&gt; at the top of my module to inject the GenServer quality of life functions, and then I began implementing the callbacks necessary for using them in the provided functions that the test suite will be testing against. On my first pass, my instinct was to leverage pattern matching on lists to manipulate the ordering of the list. I liked the elegance of this initial solution, but after sleeping on it I realized it could be much more performant. The next day I implemented a second solution, one which is less elegant but certainly faster and more scalable.&lt;/p&gt;

&lt;p&gt;As I said, my gut instinct was to leverage pattern matching. Lists in Elixir are effectively linked lists, meaning that internally they are pairs containing the head and the tail of the list. Even a list of one item is actually a list where the head is that item and the tail is an empty list. If I can ensure that the head of the list is always the oldest element, I can enforce a predictable order on the list. In order to do this, I need to implement an insertion method that always adds new items at the very end of the tail. I achieved this through recursively calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert/2&lt;/code&gt;, pattern matching on the head and tail until the base case is reached (i.e. one item and an empty list). By inserting this way, the oldest item will always be the head of the list. This makes reading from the list simple, as we simply pattern match on the list, returning the head as the value and the tail as the new state. We can enforce our fixed size by returning an error if the length of our list reaches our capacity.&lt;/p&gt;

&lt;p&gt;After this all we have left to do is implement the overwrite behavior. We achieve this be simply structuring the callback in a slightly different way to the basic write callback. If we’ve reached capacity, we pattern match on the tail and insert the item using that tail, throwing out the old head. If it hasn’t reached capacity, we can insert as we would normally.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defmodule CircularBuffer do
  @moduledoc &quot;&quot;&quot;
  An API to a stateful process that fills and empties a circular buffer
  &quot;&quot;&quot;
  use GenServer
  @impl true
  def init(capacity) do
    {:ok, {capacity, []}}
  end
  @impl true
  def handle_call(:read, _from, state) do
    case state do
      {_capacity, []} -&amp;gt;
        {:reply, {:error, :empty}, []}
      {capacity, [oldest | tail]} -&amp;gt;
        {:reply, {:ok, oldest}, {capacity, tail}}
    end
  end
  @impl true
  def handle_call({:write, item}, _from, {capacity, list} = _state) do
    if length(list) == capacity do
        {:reply, {:error, :full}, list}
    else
      {:reply, :ok, {capacity, insert(list, item)}}
    end
  end
  @impl true
  def handle_call({:overwrite, item},
                 _from, {capacity, 
                [ _head | tail] = list} = _state) 
                do
    if length(list) == capacity do
      {:reply, :ok, {capacity, insert(tail, item)}}
    else
      {:reply, :ok, {capacity, insert(list, item)}}
    end
  end
  defp insert([], item), do: [item]
  defp insert([head | []], item), do: [head| [item | []]]
  defp insert( [head | tail] = _list, item), do: [head | insert(tail, item)]

  @impl true
  def handle_cast(:clear, {capacity, _list} = _state) do
    {:noreply, {capacity, []}}
    end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This solution has the benefit of being pretty to look at and taking up relatively few lines of code. It also has a blazing fast read time, since the next item we want is always at the front. However, there are a couple of significant drawbacks. For starters, my insertion strategy scales very poorly. Every time I want to insert something I have traverse the entire buffer until I get to the end. For a small buffer this is trivial, but if the buffer grew to thousands or tens of thousands of items in length, I would be waiting around a lot to insert new items. On top of that, by leaning on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length()&lt;/code&gt; to determine if I’m at capacity, I’m potentially adding another bottleneck. Under the hood this is an Erlang function and is probably quite fast, but at time of writing I’m not familiar with the Erlang libraries to be certain. A worst case scenario though might have me traversing the entire list twice in a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; call. While this is still only 2N in Big O, we can definitely do better.&lt;/p&gt;

&lt;p&gt;My second solution is fairly simple in concept, relying on the speed of key lookup in maps, but is a little less easy on the eyes:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defmodule CircularBuffer do
  @moduledoc &quot;&quot;&quot;
  An API to a stateful process that fills and empties a circular buffer
  &quot;&quot;&quot;
  use GenServer
  @doc &quot;&quot;&quot;
  Initializes buffer with max capacity, a read index,
  a write index, an available slot counter, and a data store.
  &quot;&quot;&quot;
  @impl true
  def init(capacity) do
    {:ok, %{cap: capacity, 
            next_read: 1, 
            next_write: 1, 
            slots: capacity, 
            store: init_store(capacity)}
    } 
  end

  defp init_store(capacity) do
    Enum.reduce(1..capacity, %{}, fn x, acc -&amp;gt; Map.put(acc, x, nil) end)
  end

  @impl true
  def handle_call(:read, _from, %{next_read: next_read, store: store} = state) do
    case store[next_read] do
      nil -&amp;gt;
        {:reply, {:error, :empty}, state}
      value -&amp;gt;
        {:reply, {:ok, value}, update_read(state)}
    end
  end

  @impl true
  def handle_call({:write, item}, _from, %{slots: slots} = state) do
    if slots == 0 do
      {:reply, {:error, :full}, state}
    else
      {:reply, :ok, update_write(state, item)}
    end
  end

  @impl true
  def handle_call({:overwrite, item}, _from, %{slots: slots} = state) do
    if slots == 0 do
      {:reply, :ok, update_overwrite(state, item)}
    else
      {:reply, :ok, update_write(state, item)}
    end
  end

  @impl true
  def handle_cast(:clear, state) do 
    {:noreply, %{state | next_read: 1, 
                        next_write: 1, 
                        slots: state.cap, 
                        store: init_store(state.cap)
                }
    }
    end

  defp update_read(%{cap: cap,
    next_read: current_next_read,
    slots: slots,
    store: store} = state) 
  do
      if current_next_read == cap do
      %{state | next_read: 1, 
                slots: slots + 1, 
                store: %{store | current_next_read =&amp;gt; nil}
        }
    else
      %{state | next_read: current_next_read + 1, 
                slots: + 1, 
                store: %{store | current_next_read =&amp;gt; nil}
        }
    end
  end

  defp update_write(%{cap: cap, 
                    next_write: next_write, 
                    slots: slots, 
                    store: store} = state, item) do
    if next_write == cap do
      %{state | next_write: 1, 
                slots: slots - 1, 
                store: %{ store | next_write =&amp;gt; item}
        }
    else
      %{state | next_write: next_write + 1, 
                slots: slots - 1, 
                store: %{store | next_write =&amp;gt; item}
        }
    end
  end

  defp update_overwrite(%{cap: cap, 
                        next_write: next_write, 
                        store: store, 
                        next_read: next_read}= state, item) do
    incoming_next_read = 
        if next_read + 1 &amp;gt; cap do 
            1
        else 
            next_read + 1
        end
    if next_write == cap do
      %{state | next_read: incoming_next_read, 
                next_write: 1, 
                store: %{ store | next_write =&amp;gt; item}}
    else
      %{state | next_read: incoming_next_read, 
                next_write: next_write + 1, 
                store: %{store | next_write =&amp;gt; item}}
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This solution relies on using lookup keys to keep track of where the next item goes, where the next item to read goes, and how many available slots we have. The crux of the solution lies in the init function. I use a range of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..capacity&lt;/code&gt; to create a map where the keys are integers pointing to null values. Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_read&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next_write&lt;/code&gt; keys keep track of where in the buffer we need to read and write next. This solution is much, much faster, with a worst case Big O of N, where we have to create our buffer of N size once, but never have to fully traverse it again. As we insert and extract items, we update the pointers.&lt;/p&gt;

&lt;p&gt;A further improvement on this solution might be to use Streams to lazily load in new chunks of our buffer, rather than build it all at once. Or, more simply, we could simply make the extension of our store be a function of the insertion. Done this way, the store map would begin empty and only have new keys added when a write is performed, emitting an error when a normal write is attempted when our available slots is 0. I believe we could achieve a O(1) with this solution, which is pretty cool.&lt;/p&gt;

&lt;p&gt;This was a fun one, and an interesting challenge that still has me thinking of ways to improve on my solutions. Check out a slightly more readable version on my &lt;a href=&quot;https://github.com/Shaka-n/elixir-exercism-exercises/blob/main/circular-buffer/lib/circular_buffer.ex&quot;&gt;GitHub&lt;/a&gt; or &lt;a href=&quot;https://exercism.org/tracks/elixir/exercises/circular-buffer/solutions/Shaka-n&quot;&gt;Exercism&lt;/a&gt; profiles.&lt;/p&gt;</content><author><name></name></author><category term="Elixir" /><summary type="html">I recently completed an Exercism challenge to implement a circular buffer in Elixir, and I wanted to talk through my solution. I’ve pasted the written instructions for the buffers behavior below, though the test suite had some additional complexity which I’ll try to explain.</summary></entry><entry><title type="html">Developing a Personal Project, Part 3: Planning</title><link href="http://localhost:4000/general/2023/05/15/developing-a-personal-project-part-3.html" rel="alternate" type="text/html" title="Developing a Personal Project, Part 3: Planning" /><published>2023-05-15T00:00:00-04:00</published><updated>2023-05-15T00:00:00-04:00</updated><id>http://localhost:4000/general/2023/05/15/developing-a-personal-project-part-3</id><content type="html" xml:base="http://localhost:4000/general/2023/05/15/developing-a-personal-project-part-3.html">&lt;p&gt;&lt;em&gt;In the last part of this series I discussed in brief my thoughts on the research process. Upon reflection, I realize that that topic deserves a more in-depth discussion, but hopefully it at least gave you an idea of my approach and thought process. In this latest post I will be discussing the last “administrative” step before actually getting into the code: planning.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After much research and deliberation you feel it’s time to start coding. You can see your finished project, gleaming in your mind’s eye. But while that complete idea is still fresh it would behoove you to enshrine its likeness in written form: a project overview document. As you knuckle down and start cranking out PRs, your high-level perspective will fade as you become concerned with nitty gritty details. You’re going to switch contexts, wearing the hat of the programmer rather than the project manager. If you don’t write down your plan now, you may find it shifting over time, possibly in very unproductive directions. As you struggle with practical challenges, you may become discouraged or lose sight of your goal. A written roadmap will help guide you, keep you on track, and ultimately tell you when it’s time to stop working.&lt;/p&gt;

&lt;p&gt;There are many formal methodologies for organizing a project, and you can choose any or none of them. You can organize your project however you like so long as it provides structure. It may be that you wish to work for a company that uses the Agile method. It could be good practice to organize your project in that style. Maybe you just need a “To Do” list. No matter how you choose to structure your plan, I would hold on to the document. Though uncommon, I have seen some interviewers ask for samples of technical writing. For my part, I am most recently familiar with the ShapeUp method, and so that is my current preference, although as you’ll see I use it mostly as inspiration.&lt;/p&gt;

&lt;p&gt;Below you will see the planning document I wrote for my Discord Bot. I begin with a problem statement, followed by potential solutions. I know that I want to build a bot regardless of utility, so this initial part is mostly a mental exercise. Still, I think it’s useful to lay out the problem as it is, along with it’s potential solutions and their pros and cons. In a professional setting, this can help assure you that your plan is sound, or point out flaws in your reasoning.&lt;/p&gt;

&lt;p&gt;The following section outlines what features the finished project must have, what it would be nice for it to have, and what it will not have. Here I define in concrete terms how the application will behave, but also what it will not do. As I mentioned in previous posts, be ruthless with scope. Cut away anything that isn’t weight bearing for your central idea. You’ll be grateful for it later.&lt;/p&gt;

&lt;p&gt;The last section is where I lay out specific tasks to be completed. In ShapeUp, tasks are organized by “Vertical Slice”, such that when a Slice is completed some increment of value is delivered. Seeing as I’m just one guy, and this is sort of a “draw the rest of the owl” scenario, I opted for horizontal slicing instead. Is this a glorified “To Do” list? Certainly, but it’s no less useful for that fact. At this level, some people like to use project trackers like Trello or a GitHub project, so if I were so inclined I would assign each bullet point to a card.&lt;/p&gt;

&lt;p&gt;As I progressed through these tasks, I would update them with notes to keep track of important info like test keys and test user UUIDs. Occasionally, when some aspect of the API did not behave as I expected, I would tweak this document to reflect this new technical reality. For example, when I first laid out my plan I expected to be using the REST API, but then I realized that Nostrum uses the Gateway API and had to adjust accordingly. When I became frustrated with config or a stubborn error, I would refer back to the overview and note how far I had come.&lt;/p&gt;

&lt;p&gt;Maybe you’re a 10x sorcerer who doesn’t need this kind of thing. But for a dope like me, staying organized and tracking my progress is critical to maintaining both my productivity and equanimity. See you in part 4, where I actually will show you some code.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Discord Bot - Movie Scheduler - Project Overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Problem&lt;/em&gt;: My friends and I have trouble remembering when our bi-weekly movie night is scheduled for.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Potential Solutions&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;Become more mindful of our commitments as a group.&lt;br /&gt;
Pros: Humanist. Cons: Hard, unreliable.&lt;/p&gt;

&lt;p&gt;Send out google calendar invites when a day is decided on.&lt;br /&gt;
Pros: Reliable. Easy. Cons: Boring, tedious. Resembles work too much&lt;/p&gt;

&lt;p&gt;One person write down an automated reminder to themselves.&lt;br /&gt;
Pros: Very Easy. Cons: unreliable, boring&lt;/p&gt;

&lt;p&gt;Create a discord bot that has functionality for recording movie night dates and functionality for sending reminders about the chosen date.&lt;br /&gt;
Pros: Fun, good resume project, has scaling potential for other projects. Cons: high effort, overcomplicated&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accepted Solution: Discord Bot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Must Haves:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an application that connects to a discord bot user, deployed in some way that does not rely on a local machine.&lt;/li&gt;
  &lt;li&gt;A slash command that accepts a string representing a movie night date and persists it as a date. (i.e. “/movienight schedule 3/6/23”)&lt;/li&gt;
  &lt;li&gt;A cron job that monitors the stored dates and sends a message to the discord channel when the chosen date approaches. (i.e. “There’s a movie night this week on Thursday!”)&lt;/li&gt;
  &lt;li&gt;proper error messages for misconfigured commands (e.g. “/movienight thrudsay” produces “I don’t understand that command”)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nice To Haves:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Accept multiple date formats (e.g. “/movienight thursday” == &lt;this coming=&quot;&quot; thursday=&quot;&quot;&gt;. &quot;/movienight next thursday&quot; == &lt;the thursday=&quot;&quot; after=&quot;&quot; the=&quot;&quot; coming=&quot;&quot; sunday=&quot;&quot;&gt;, &quot;/movienight Thursday, March 6th&quot;)&lt;/the&gt;&lt;/this&gt;&lt;/li&gt;
  &lt;li&gt;Accepts the movie name as part of the initial scheduling string and returns it as part of the reminder. (e.g. “There’s movie night this week on Thursday! We’re watching Scream 2!”)&lt;/li&gt;
  &lt;li&gt;Reschedule command that accepts 2 dates, a previously scheduled movie night and the new chosen date (i.e. /movienight 3/6/23 3/12/23)&lt;/li&gt;
  &lt;li&gt;Cancel command: accepts a date and cancels the movie for that date. (e.g. /movienight cancel 3/6/23 -&amp;gt; “Movie canceled for 3/6/23”)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Won’t Haves:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Will not process unformatted strings (e.g. /movienight 2 weeks from now. /movienight schedule a movie for next friday)&lt;/li&gt;
  &lt;li&gt;Will not accept mispelled days&lt;/li&gt;
  &lt;li&gt;Will not play spotify songs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Horizontal Slicing due to manpower issues)&lt;/p&gt;

&lt;p&gt;Slices:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Slice 1 (CRUD Stuff):
    &lt;ul&gt;
      &lt;li&gt;create database to store movie night data
        &lt;ul&gt;
          &lt;li&gt;for dev purposes, this is handled already. We’ll need to figure out the deploy situation later though.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;create migration for movienight table
        &lt;ul&gt;
          &lt;li&gt;what fields does a movienight need? datetime, movie title, creator id (discord user id?). Can’t think of any others&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;create schema for movienight
        &lt;ul&gt;
          &lt;li&gt;date must be unique, spit out error when creating a movie night when one is already booked for that date&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;create context for CRUD movienights
        &lt;ul&gt;
          &lt;li&gt;required functions:
            &lt;ul&gt;
              &lt;li&gt;create
                &lt;ul&gt;
                  &lt;li&gt;collision logic for existing movie nights?&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;get movie night by date&lt;/li&gt;
              &lt;li&gt;get next movie night&lt;/li&gt;
              &lt;li&gt;update movie night with new date (and/or movie)&lt;/li&gt;
              &lt;li&gt;cancel/delete movie night&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;create functions for parsing movienight input strings into dates&lt;/li&gt;
      &lt;li&gt;write tests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Slice 2 (The Cron Stuff):
    &lt;ul&gt;
      &lt;li&gt;import Oban (or other cron scheduler?)&lt;/li&gt;
      &lt;li&gt;create cron job to monitor movie queue&lt;/li&gt;
      &lt;li&gt;create worker to trigger reminders&lt;/li&gt;
      &lt;li&gt;write tests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Slice 3 (The Discord Stuff):
    &lt;ul&gt;
      &lt;li&gt;create module for sending reminder messages to the channel&lt;/li&gt;
      &lt;li&gt;register a new slash command for scheduling movie night&lt;/li&gt;
      &lt;li&gt;register slash command for checking movie night&lt;/li&gt;
      &lt;li&gt;register slash command for rescheduling movie night&lt;/li&gt;
      &lt;li&gt;register slash command for canceling movie night&lt;/li&gt;
      &lt;li&gt;create gateway event handler consumer to accept data from slash command&lt;/li&gt;
      &lt;li&gt;persist data received by consumer&lt;/li&gt;
      &lt;li&gt;write tests (includes integration)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Useful Info:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Test Server Guild Id: ‘&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;**’&lt;/li&gt;
  &lt;li&gt;Application Id: ‘&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;**’&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="General" /><summary type="html">In the last part of this series I discussed in brief my thoughts on the research process. Upon reflection, I realize that that topic deserves a more in-depth discussion, but hopefully it at least gave you an idea of my approach and thought process. In this latest post I will be discussing the last “administrative” step before actually getting into the code: planning.</summary></entry><entry><title type="html">Manipulating Bitstrings in Elixir</title><link href="http://localhost:4000/elixir,%20quick%20tips/2023/05/14/manipulating-bitstrings-in-Elixir.html" rel="alternate" type="text/html" title="Manipulating Bitstrings in Elixir" /><published>2023-05-14T00:00:00-04:00</published><updated>2023-05-14T00:00:00-04:00</updated><id>http://localhost:4000/elixir,%20quick%20tips/2023/05/14/manipulating-bitstrings-in-Elixir</id><content type="html" xml:base="http://localhost:4000/elixir,%20quick%20tips/2023/05/14/manipulating-bitstrings-in-Elixir.html">&lt;p&gt;Per the &lt;a href=&quot;https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html#bitstrings&quot;&gt;official documentation&lt;/a&gt;, bitstrings are a fundamental data type in Elixir representing a contiguous sequence of bits in memory. Useful for UTF-8 encodings and other fun things like secret obfuscation, bitstrings are a great tool to have in your back pocket. Instead of parroting existing documentation, I wanted to share a little nuance that I had trouble grasping while I was learning about this data type.&lt;/p&gt;

&lt;p&gt;When you concatenate, prepend, or append bitstring literals in a bitstring special form(i.e. «value::size»), the output format can look very different from the input format. If your output produces a valid UTF-8 encoded character, you will get that character. If the result of the concatentation would overflow 8 bits (the maximum), then the result will be whatever integer is represented by that 8-bit value, and then a bitstring literal comprised of the remainder. For example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;value = &amp;lt;&amp;lt;0b110::3, 0b001::3&amp;gt;&amp;gt;
new_value = &amp;lt;&amp;lt;0b011::3, value::bitstring, 0b000::3&amp;gt;&amp;gt;
# =&amp;gt; &amp;lt;&amp;lt;120, 8::size(4)&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example we are both prepending and appending bitstring literals to the original bitstring value, which you can visualize like so:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;0b011::3, 0b110::3, 0b001::3, 0b000::3&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice that there are more than 8 bits in this intermediate representation. Since we obviously cannot have more than 8 bits in a bitstring, we need to do something with the extra bits. Elixir will take the first 8 bits provided and return them as an integer(i.e. 120). The reason for this is that a bitstring comprised of 8-bytes is what is called a binary, and is treated differently than other bitstrings. Put in the official terms, a binary is a bitstring that is divisible by 8. All binaries are bitstrings, but not all bitstrings are binaries. The remaining bits from out intermediate representation will be returned as a bitstring literal, using the verbose syntax (i.e. 8::size(4)). Taking it further, what happens if we have many more bits?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;0b011::3, 0b110::3, 0b001::3, 0b000::3, 0b001::3, 0b010::3&amp;gt;&amp;gt;
# =&amp;gt; &amp;lt;&amp;lt;120, 130, 2::size(2)&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So you see, bitstrings concatenated/appended/prepended in this way will return integers from the leading 8-bit fragments, and return the remaining bits as bitstring literals in the verbose syntax.&lt;/p&gt;

&lt;p&gt;This was very confusing for me when I first learned it, so I hope this helps someone. This is by no means a complete explanation of bitstrings, so for more on bitstrings, check out the &lt;a href=&quot;https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html&quot;&gt;official docs&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="Elixir, Quick Tips" /><summary type="html">Per the official documentation, bitstrings are a fundamental data type in Elixir representing a contiguous sequence of bits in memory. Useful for UTF-8 encodings and other fun things like secret obfuscation, bitstrings are a great tool to have in your back pocket. Instead of parroting existing documentation, I wanted to share a little nuance that I had trouble grasping while I was learning about this data type.</summary></entry><entry><title type="html">Developing a Personal Project, Part 2: Research</title><link href="http://localhost:4000/general/2023/05/12/developing-a-personal-project-part_2.html" rel="alternate" type="text/html" title="Developing a Personal Project, Part 2: Research" /><published>2023-05-12T00:00:00-04:00</published><updated>2023-05-12T00:00:00-04:00</updated><id>http://localhost:4000/general/2023/05/12/developing-a-personal-project-part_2</id><content type="html" xml:base="http://localhost:4000/general/2023/05/12/developing-a-personal-project-part_2.html">&lt;p&gt;&lt;em&gt;In the first part of this series, I explained my reasoning around the broad choices that you can make at the start of a personal project. In this second part, I will discuss the logical next step: research.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the end of the last blog post, I described how I resolved to make a Discord chat bot using Elixir. With this concrete goal firmly set in mind, I can now go about researching how to best use these tools. This can be a very open-ended process, ranging in complexity from querying a ChatGPT sesssion, to blindly Googling questions until a vague idea forms in my mind, to performing comprehensive analyses of technical documentation. I recommend a slow and thorough approach at this stage. Misreading documentation early on can have you spinning your wheels for hours or even days when it comes time to implement basic features. Coming across a new framework may tempt you to alter your set objective, taking you nearly back to square one. Much as with the objective setting process, the technical research process is an opportunity to limit the scope of your project and speed you on your way to success. In short, take your time.&lt;/p&gt;

&lt;p&gt;Given my objective, there were two natural starting points for research: the Discord API, and the Elixir application. Seeing as I’m already familiar with building Elixir apps, I started by reading the &lt;a href=&quot;https://discord.com/developers/docs/intro&quot;&gt;Discord documentation&lt;/a&gt;. Discord has built a powerful web API for interacting with their platform. They give developers access to a wide gamut of resources, some of which are very exciting to consider, like playing sounds via the voice channels. But I’m just here to make a digital assistant, so I’m interested in two things: creating a persistent connection between an Elixir application and passing data between that application and Discord.&lt;/p&gt;

&lt;p&gt;Reading through the &lt;a href=&quot;https://discord.com/developers/docs/getting-started&quot;&gt;Getting Started&lt;/a&gt; guide, I learn that there are three things I need before I can break ground on any code. Firstly, I need a Discord account, which conveniently I already have. Secondly, I need to register a new application on Discord’s developer portal. Thirdly, I need to register a new bot user. This is a key distinction that may help avoid some confusion down the line: your application, your code, is running as any application would, either locally on your machine, or on a hosting service (e.g. fly.io). Meanwhile the “bot” is actually just a “user” that is added as a member to a given Discord server/guild. The bot can be given any permissions that a user can have, and it acts as the visible presence of your application within the server. Any number of servers can have a bot user connecting to your application (though over a certain threshold of servers Discord imposes a review process).&lt;/p&gt;

&lt;p&gt;Once I have my bot user ready, I encounter my first technical decision: WebSockets vs. REST. Discord actually has two APIS, one called the Gateway API which is WebSockets-based, and another which uses a classic REST-like pattern. There’s plenty of strengths and weaknesses to consider between these two approaches at scale. HTTP endpoints are more widely adopted and supported, but can have trouble with concurrent requests. WebSockets connections provide truly realtime communication, but they’re not supported by older browsers and you must implement a protocol for recovering terminated connections yourself. These considerations prompt a followup question: do I want to implement the logic for the network requests myself, or do I want to use an existing library? To help make this decision, I revisit my goal of deploying this app. Writing my own WebSockets connection would be a good exercise, but with experience comes humility, and I’m quite certain that my boilerplate WebSockets code will not be as reliable as that of an open source community. A compromise, for learning’s sake, would be to read and understand the source code. At the end of the Getting Started guide, I found a link to a Community Resources page: in other words, links to wrapper libraries. A wrapper library provides methods for interacting with an API in the language of your choice. Any API of notable popularity will have a host of these. Most Discord libraries seem to be for Javascript, but a quick Google search finds an Elixir one for me: &lt;a href=&quot;https://github.com/Kraigie/nostrum&quot;&gt;Nostrum&lt;/a&gt;. The documentation seems robust enough, and there’s an active community around the project. A quick peruse of the docs shows me that Nostrum implements a WebSockets connection to the Gateway API, and just like that my decision is made for me. I can make decent headway while learning from an open source project.&lt;/p&gt;

&lt;p&gt;In the next post I’ll talk about my system design and how my research distills into a planning document.&lt;/p&gt;</content><author><name></name></author><category term="General" /><summary type="html">In the first part of this series, I explained my reasoning around the broad choices that you can make at the start of a personal project. In this second part, I will discuss the logical next step: research.</summary></entry><entry><title type="html">How to Develop a Personal Project, or ‘Will Work for Work’</title><link href="http://localhost:4000/general/2023/05/11/developing-a-personal-project-part_1.html" rel="alternate" type="text/html" title="How to Develop a Personal Project, or ‘Will Work for Work’" /><published>2023-05-11T00:00:00-04:00</published><updated>2023-05-11T00:00:00-04:00</updated><id>http://localhost:4000/general/2023/05/11/developing-a-personal-project-part_1</id><content type="html" xml:base="http://localhost:4000/general/2023/05/11/developing-a-personal-project-part_1.html">&lt;p&gt;Self-taught, bootcamp, or college grad, we’re all under the gun to develop software in our free time. It’s an expectation of the field that as a developer that you are constantly learning and making things on your own. The Man wants to see a green commit history. But where to start? The blank canvas is intimidating. Having faith in your current efforts, keeping morale high, can be difficult. In this short blog series, I will break down my most recent approach to this process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set Your Goals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don’t know why you’re doing something, you will lose focus and flounder. A mid-term goal like “build a website” provides a more satisfying context from which to monitor progress than “get rich”. The more specific your objective, the more confident you will be in your ability to complete the project. Confidence is everything when you’re flying solo.&lt;/p&gt;

&lt;p&gt;Resolving to “build a portfolio project to learn Python” is more specific in this way and will help to set boundaries around your project. Indeed, it can be just as important to lay out what you will &lt;em&gt;not&lt;/em&gt; do. You could limit your project to a CLI tool, accessible only through shell commands, or a static webpage hosted on Github Pages. In doing so, you preclude many extraneous considerations that would otherwise distract you, and as a result produce something significantly more polished and impressive.&lt;/p&gt;

&lt;p&gt;My goal this time around is indeed “get rich,” (&lt;em&gt;cough&lt;/em&gt; hire me) but as I said this is too open ended. I resolved to build a portfolio project as a digestible chunk of this larger effort. I knew that I wanted to focus on backend over frontend features as well as deploy it in some capacity. I like Elixir as a language and would like to learn more about it. So my goal is “build a backend-only portfolio project using Elixir.”&lt;/p&gt;

&lt;p&gt;The first piece of advice that people will give you in regards to starting personal projects will be something along the lines of “make something related to your interests.” I would tend to agree, with an asterisk attached. Depending on your skill level, you may not be capable of producing what you envisioned or even something with utility. This can be upsetting to discover, but is to be expected. Personal projects are meant to demonstrate that you can do the work, nothing more. If you find yourself trying to build Salesforce or &lt;em&gt;League of Legends&lt;/em&gt; from scratch, I would rephrase the advice above: “let your interests inform the aesthetic of your personal project”. Do you like trading cards? Make a static page that serves up digital trading cards. Do you like sports? Query an open API to display the latest match data from the game of your choice. Are either of these things necessarily useful? Not really. But they provide a theme that can help you design your frontend, and a purpose around which to design your backend. It’s all just wallpaper, and we’re putting up sheetrock.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decide What You’re Building&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Too often have I fallen into the trap of trying to make something “that I would use.” All I’m saying is that you don’t have to be so hard on yourself. If you’re stubborn like me and really &lt;em&gt;need&lt;/em&gt; the project to have some sort of larger purpose, label it a prototype or proof of concept. It’s important to make things easy for yourself at this stage.&lt;/p&gt;

&lt;p&gt;I use Discord all the time. I use it to talk to friends and generally have fun using it. Discord has a robust open API for interacting with individual servers (also known as Guilds). It seemed like it would be fun to build something that my friends and I could get a laugh out of. So I asked them: how would you like a chatbot? what would you like it to do? Discounting joke replies, they answered: be a digital assistant.&lt;/p&gt;

&lt;p&gt;We have bi-weekly movie nights, and for some reason no one can muster enough mental rigor to remember which day we agreed to hold them. I would build a chatbot that remembered when movie night was. Would I &lt;em&gt;really&lt;/em&gt; use this? Not really. Any one of us could just write down the date in any of a thousand reminder applications, and that’s not even considering a sticky note. Rather than build something “useful”, this idea furnishes a conceit upon which to build my project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose Your Tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After resolving in your mind this aesthetic or theme, you can start making technical choices. What languages do you know best or want to learn? What tools are most easily in reach? This is another opportunity to limit the scope of your project. Building a new HTTP library for Node might be an excellent learning opportunity, but it’s hardly an efficient use of your time. It’s all about balancing how much you value the learning compared to the finished product. All that being said, do what makes you the most excited to tackle the project, as your own enthusiasm will be what drives you across the finish line.&lt;/p&gt;

&lt;p&gt;For the past two years I’ve been mostly developing in Elixir. As I said, I like the language, and I’d like to learn more about it as well. In terms of technical suitability, it lends itself well to fault-tolerant, scalable systems, though that is somewhat irrelevant (or so I thought) in the context of a chatbot for my immediate friends and I. So Elixir it is. As for libraries, a quick Google search tells me there are a few open-source libraries that can act as a wrapper for handling API calls to Discord’s API. I’d like to deploy this bot to production at some point, and Fly.io is quite cheap at the base tier. With these broad strokes in mind, I feel I’m ready to start building. Just kidding, now I’m ready to start planning. See you in part 2.&lt;/p&gt;</content><author><name></name></author><category term="General" /><summary type="html">Self-taught, bootcamp, or college grad, we’re all under the gun to develop software in our free time. It’s an expectation of the field that as a developer that you are constantly learning and making things on your own. The Man wants to see a green commit history. But where to start? The blank canvas is intimidating. Having faith in your current efforts, keeping morale high, can be difficult. In this short blog series, I will break down my most recent approach to this process.</summary></entry><entry><title type="html">Ruby Enumerables Series: Chain</title><link href="http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-chain.html" rel="alternate" type="text/html" title="Ruby Enumerables Series: Chain" /><published>2020-09-27T16:11:00-04:00</published><updated>2020-09-27T16:11:00-04:00</updated><id>http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-chain</id><content type="html" xml:base="http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-chain.html">&lt;p&gt;Ruby Enumerables Series: Chain&lt;/p&gt;

&lt;p&gt;This week I’m continuing the enumerables series with chain. It’s a relatively simple enumerable, so this may be an entry that I return to to flesh out later. I have a hunch that there are a number of methods that are logically connected with each other that aren’t necessarily next to each other in the docs. So if for some reason somebody is keeping track, I might return to this one to flesh it out more with references to related methods.&lt;/p&gt;

&lt;p&gt;Moving on, chain is slightly meta, in that it allows you to return an enumerato object from an enumerator and an enumerable. In Ruby, the Enumerator class which allows for internal or external iteration. The Iterator is a design pattern that goes beyond the scope of this blog post, but suffice to say that an external iterator is something that acts on a collection from outside, and an internal iterator is something that acts on a collection from within the collection. Said differently, an external iterator is a method waiting for a collection to be passed to it as an argument, while an internal iterator is a method that is already available to a collection that allows it to traverse through itself. I would love to go on, but I have to find a way to fit some code in here.&lt;/p&gt;

&lt;p&gt;Basically, you invoke chain on an enumerable and you give chain another enumerable as an argument. It will return an instance of the Enumerator class which can be converted to an array or hash depending on your needs. It chains the two enumerables together.&lt;/p&gt;

&lt;p&gt;Most simply, this can be used to combine two arrays:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array1 = [1,2,3]
array2 = [4,5,6]

enumerator = array1.chain(array2)

enumerator.to_a

# =&amp;gt; [1, 2, 3, 4, 5]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also use it to chain an array and a hash (they are both enumerables), but the results are a little odd:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
array = [1,2,3]
hash = {a =&amp;gt; 4, b =&amp;gt; 5}

enumerator = array.chain(hash)

enumerator.to_a

# =&amp;gt; [1, 2, 3, ['a', '4'], ['b', '5']]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Attempting to convert the enumerator to a hash throws an error, so you can only convert this to an array. For now I can only speculate as to when I might want to add hash values to an array, but preserve the relation between key and value by nesting them together in a sub-array. It would be less performant in any case that I can think of, so if anyone can think of a time that they would do this, please drop me a line. Maybe I’m just missing something.&lt;/p&gt;

&lt;p&gt;For now, that’s chain. Next week I’m thinking of taking a crack at Sass, so hopefully we’ll get a longer post out of that.&lt;/p&gt;</content><author><name></name></author><category term="Ruby" /><summary type="html">Ruby Enumerables Series: Chain</summary></entry><entry><title type="html">Ruby Enumerables Series: Any or All?</title><link href="http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-any-all.html" rel="alternate" type="text/html" title="Ruby Enumerables Series: Any or All?" /><published>2020-09-27T06:35:01-04:00</published><updated>2020-09-27T06:35:01-04:00</updated><id>http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-any-all</id><content type="html" xml:base="http://localhost:4000/ruby/2020/09/27/ruby-enumerable-series-any-all.html">&lt;p&gt;Ruby Enumerables Series: Any or All?&lt;/p&gt;

&lt;p&gt;Last week I wrote about the reduce method and how it’s implemented in Javascript. Continuing on that theme, let’s switch gears and look at the baked in enumerables found in Ruby. Ruby’s Enumerable mixin has a ton of unique, built-in methods that can make your life a whole lot easier if you take the time to learn when to use them. I barely even know 10% of them, which is why I’m going to try and least learn what they all do at a glance. In all, there are 59 unique instance methods, but some are just inversions of other methods, so I’m not going to write an entire blog for each. Instead, I’m going to do my best to group the most closely related methods together and explain them in assocation with one another. First up: any? and all?.&lt;/p&gt;

&lt;p&gt;All is a very simple method: it accepts a code block, passes each element in the collection to the block in turn, and returns true if the block never returns false or nil. This might look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array = [1,4,7,9]

array.all? {|n| n &amp;lt; 10}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return true because all of the elements are less than 10. Easy. It has an even simpler implementation. If you pass an array to all? without a code block, it will return true as long as none of the elements are false or nil.&lt;/p&gt;

&lt;p&gt;Inverting this concept, any? accepts a code block, passes each element in the collection to the block in turn, and returns true if the block ever returns false or nil. In the above example, using any? would return false. However, the below example will return true:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
array = [1,2,3,&quot;4&quot;]

array.any? {|n| n.is_a?(String)}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here all we are checking for is whether or not any of the elements are strings. Since the fourth element is the string “4”, any? returns True. Similarly to all?, any? can also be used without providing a code block. In this case, it will return true if at least one of the elements is not false or nil.&lt;/p&gt;

&lt;p&gt;I should make a note of the third usage for any? and all? tha has only been added: pattern matching. Pattern matching is a bit beyond the scope of this blog entry, but in essence, it allows you to provide a pattern with certain known values and certain unknown values to be expected by a block of code. I myself don’t full grasp the power of this, but my understanding is that it allows you to be much more concise, which of course we love. In the case of all?, it will return whether the expected pattern matches for every collection member. In the case of any? it will return wehter the expected pattern matches for any collection member.&lt;/p&gt;

&lt;p&gt;That’s any and all. Perhaps next week we’ll dive further into pattern matching.&lt;/p&gt;</content><author><name></name></author><category term="Ruby" /><summary type="html">Ruby Enumerables Series: Any or All?</summary></entry><entry><title type="html">Reductive</title><link href="http://localhost:4000/javascript/2020/09/19/reductive.html" rel="alternate" type="text/html" title="Reductive" /><published>2020-09-19T12:12:01-04:00</published><updated>2020-09-19T12:12:01-04:00</updated><id>http://localhost:4000/javascript/2020/09/19/reductive</id><content type="html" xml:base="http://localhost:4000/javascript/2020/09/19/reductive.html">&lt;p&gt;The reduce method is a powerful tool built into vanilla Javascript that can do a lot of heavy lifting for a software developer. Knowing how to use it can distinguish an experienced programmer from her less experienced peers. However, reduce is not as straightforward to use  as the other enumerators built into vanilla JS. Few problems actually call for it, and using reduce unnecessarily can prove to be far more trouble than it’s worth. If we’re going to understand how to use reduce, we first need to understand what it is and when it is best employed.&lt;/p&gt;

&lt;p&gt;Broadly speaking, a reducer is a logic tool that distills a refined data point from a larger data set. If the data set is a stew, the reducer is the stovetop which will “boil it down” to a more refined product. Different languages approach this concept in slightly different ways. In Javascript, a reducer looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
const array = [1, 4, 8, 5]
const reducer = (accumulator, currentValue) =&amp;gt; accumulator + currentValue

console.log(array.reduce(reducer))

output: 18

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s happening here is very interesting. I am calling the reduce method on my array, and then I am passing my custom reducer function to the reduce method. What’s interesting about this is that my custom reducer can be basically anything. In this case, I’m just summming each entry with the accumulator’s current value. In short, I’m summing the array. The nature of the reduce method saves the result of this expression in the accumulator variable for the next pass of the array, so all I have to do is decide what will be done upon each visit to an entry in the array. You might have already guessed, but this means that I can use reduce whenever I want. I could always use reduce! Who needs map anyway? But this is, of course, a trap.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const array = [2, 8, 11, 19]
const reducer = (accumulator, currentValue) =&amp;gt;  currentValue % 2 == 0 ? accumulator + currentValue : accumulator

console.log(array.reduce(reducer))

output: 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reduce method is generally intended for a specific purpose: merging data. In the example above, I’m just filtering for even values. And it doesn’t even work that well! Do you need the value of a single entry from the data set? Use the find method. Do you need a subset of the original dataset? Use the filter method. There a ton of built in tools that can be fit to the problem at hand. Do you need to return a single value that must be influenced by every entry in an array? Then the reduce method might be a good pick. But there is an additional consideration to make before committing to this path: do your coworkers know how to use reduce? Are you the only one within arm’s reach that knows how to debug it? I personally have known devs with many years more experience than myself that get by every day with just the map enumerator. Without casting aspersions, it’s important to note that while using cool tools is fun, it’s not always very practical. So when exactly should you use reduce? Well, there’s no one answer. But from what I understand, the best time to use reduce is when you want to both return a smaller portion of data while also performing some operation when stopping at each entry. It’s at this point that using reduce becomes more efficient and it’s time to start breaking out your accumulators.&lt;/p&gt;</content><author><name></name></author><category term="Javascript" /><summary type="html">The reduce method is a powerful tool built into vanilla Javascript that can do a lot of heavy lifting for a software developer. Knowing how to use it can distinguish an experienced programmer from her less experienced peers. However, reduce is not as straightforward to use as the other enumerators built into vanilla JS. Few problems actually call for it, and using reduce unnecessarily can prove to be far more trouble than it’s worth. If we’re going to understand how to use reduce, we first need to understand what it is and when it is best employed.</summary></entry><entry><title type="html">Externalizing Thoughts</title><link href="http://localhost:4000/meta,/productivity,/applications/2020/09/10/20-externalizing-thought.html" rel="alternate" type="text/html" title="Externalizing Thoughts" /><published>2020-09-10T12:12:01-04:00</published><updated>2020-09-10T12:12:01-04:00</updated><id>http://localhost:4000/meta,/productivity,/applications/2020/09/10/20-externalizing-thought</id><content type="html" xml:base="http://localhost:4000/meta,/productivity,/applications/2020/09/10/20-externalizing-thought.html">&lt;p&gt;I’ve used dozens of note taking applications in my life. The unspoken question is: why? In the years before cloud storage note apps, MS Word was good enough for me. I had a folder called “Documents,” which in itself contained more folders called banal things like “School,” or “Receipts,” or “Restricted Access, Do Not Open!!” Things were simpler, and I felt organized, clean, and in control of my extra-cerebral faculties. More on that later. Then one day, The Cloud rolled into town.&lt;/p&gt;

&lt;p&gt;After looming on the horizon for decades, infrastructure and manufacturing developments finally ushered in (what I consider to be) the more substantive version of the cloud – i.e. a paradigm shift away from local storage in client machines. In the enterprise world, this translated to tectonic shifts in the market, far beyond the scope of this blog. But to the user, this meant a fundamental cognitive shift. For this user in particular, it meant an end to that feeling of clean organization and the beginning of the endless search for The Note App.&lt;/p&gt;

&lt;p&gt;Most famously, Google Docs arrived on the scene in 2006. Offering a stripped down word processing experience that would be familiar enough to MS Word users to be usable, and free enough to be attractive to students and low income users. Its early iterations were a bit unreliable, and there was no need to switch right away since so many people had been forced to purchase a license to MS Word for their existing needs. Keep in mind this was back when one could still buy a non-expirant software license. One didn’t consider Google Docs until one had to buy a new computer because one’s old MS Office license would not be transferable between machines. So, do you shell a couple hundred bucks for the massively bloated MS Office? What about just buying a license for MS Word? (Don’t even get me started on OpenOffice.)&lt;/p&gt;

&lt;p&gt;Personally, this decision came up when I went off to college in 2011. Luckily for me, my university offered discounted licenses. Not everyone was so fortunate, and those that couldn’t justify the expense began to make the switch. For an individual user this was a relatively trivial decision. But at the level of the organization and enterprise, this became a serious matter. Does everyone really need MS Word? They’re just writing up reports, papers, notes, etc. Do they need all of those features? What’s better than free?&lt;/p&gt;

&lt;p&gt;As The Cloud matured, and the choice between bloated vs. free became more prevalent, businesses adopted it and users became acustomed to it. Rome fell, and the provinces began to splinter into the galaxy of note taking and productivity apps that you see today. It’s not uncommon now for a billion dollar corporation to equip the entirety of it’s workforce with Google Suite, and Microsoft of course offers it’s own cloud solutions. But that’s for the punters. The real heads know that you gotta have a cool note-taking app.&lt;/p&gt;

&lt;p&gt;What’s a “cool” note-taking app? I’m talking about Notion, Bear, Evernote, OneNote, SimpleNote, Roam Research, Google Keep, Apple Notes, Ulysses, Standard Notes, etc. I’m talking about using an IDE like Atom as a content management sytem for your personal website. I’m talking about using Jekyll and markdown to make a blog for GitHub Pages (&lt;em&gt;cough&lt;/em&gt;). I’m talking about using Ommwriter to completely cut yourself off from distraction so you can focus on the important work of paying attention to what you’re typing. I’m talking about a custom-built, tailored solution for the dramatically important task of writing something down so you don’t lose track of the information. But which one to use?&lt;/p&gt;

&lt;p&gt;There are of course, pros and cons to each. So many pros and cons, that reaching a decision becomes overwhelming. Evernote is slow and of dubious longevity, but has great organizational tools. Bear is simple and straightforward, limitingly so. Google Keep is most effectively used as a kind of digital sticky note. Google Docs is a full bore word processor at this point, but also has some gaps in its feature set that become apparent as soon as you begin to consider more complex formatting. The obvious choice would be to try all of them and see which one works best for you. Do you have time for that? How long do you have to use an application before you can reach a definitive conclusion on its efficacy? A day? A week? In this search for the perfect word processor, are you concerned about losing any documents of even middling importance? Where do the actual files live? Do they automatically save them as files at all? Or do you have to manually export each of them? We haven’t even begun to consider the security of these applications and how exactly they manage to make them free (i.e. they’re not free, they scan your documents for meta data to sell to researchers and marketers). It’s all a very complex calculation for what should be a simple problem, and the opportunity cost is potentially massive.&lt;/p&gt;

&lt;p&gt;At this point, you may have noticed that I’ve been lumping together apps that might not deserve to be compared to each other. Google Docs and Bear are two different products that are supposed to have two different applications. This is where I want to make my actual point: if they are not, they should be.&lt;/p&gt;

&lt;p&gt;The need to be able to commit complex thought to an external medium and relate it to other complex thoughts within the same or similar medium is the ultimate end goal of “the note taking app.” Further, this is largely the end goal of information science and the internet in general. The process of developing and abstracting the note taking app is a process wherein industry is engaged with this problem of expanding human consciounesses to an external medium. I would argue that the smaller, spin-off products of this endeavor (i.e. Keep, Bear, etc.) are commodifications of the progress towards this end goal, and in fact actually hamper progress towards it. Because, ultimately, there should only be one note taking app. You should be able to write a one line file that reminds you about your dentist appointment. You should be able to write a novel. You should be able to keep a vast collection of research notes and interconnect nodes within your own body of work with nodes within the body of work of another. All of these tasks are extensions of conscious thought, and as such, deserve to be nodes within the same system. Would you connect your dentist appointment to your thesis paper? Probably not. But no thought exists in a vacuum, and it should be a matter of choice what belongs in a given network, not a matter of incompatible systems. Plus, a user simplely shouldn’t have to maintain all of these separate applications. Unfortunately, I highly doubt that we will see such an application within our lifetime.&lt;/p&gt;

&lt;p&gt;If there is one product, there will be two. Artificial choice will be generated by corporations attempting to create fissures in the consumer base through marketing and circumstance created by high-level business manuveuring. If the one, omnipotent Note Taking App is finally developed by one company, it will swiftly be duplicated by rivaling firms. Users will be divided along lines of legacy systems and short-term incentives. Your employer will use Omni-App Alpha, but you will have been accustomed to using Omni-App Omega at school, and you will forever be forced to jump between the two, largely, similar, but frustratingly different and incompatible interfaces.&lt;/p&gt;

&lt;p&gt;So what to do? Get off the grid: forsake your material possessions and return to the forest. Write all of your documents as .txt files and store them in a folder on a custom Linux distro. Perhaps back up this parent folder in an external harddrive and bury it in the earth. Copy and paste your documents into the CMS of the day. Take up scrimshaw and worship the moon.&lt;/p&gt;

&lt;p&gt;There is no right answer, unfortunately. Commitment to a given product will give you a sense of organization and clarity for a time, but it by no means will save you from eventually being forced or enticed into a new product. Assigning specific use cases to different apps can give you a sense of (useful) functional fixedness that can boost focus. But you will still need 3-4 applications, and at times just as many sets of login credentials. Unfortunately, I think this will be my solution for the forseeable future.&lt;/p&gt;</content><author><name></name></author><category term="Meta," /><category term="Productivity," /><category term="Applications" /><summary type="html">I’ve used dozens of note taking applications in my life. The unspoken question is: why? In the years before cloud storage note apps, MS Word was good enough for me. I had a folder called “Documents,” which in itself contained more folders called banal things like “School,” or “Receipts,” or “Restricted Access, Do Not Open!!” Things were simpler, and I felt organized, clean, and in control of my extra-cerebral faculties. More on that later. Then one day, The Cloud rolled into town.</summary></entry></feed>